// Generated by the WOLips TemplateEngine Plug-in at 1 oct. 2006 14:45:13

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;

import fr.univlr.cri.webapp.*;
import com.webobjects.foundation.*;

public class CadreIp extends UncWebComponent {		// on veut g�rer des ancres...

    // fonctions a gerer (pour le mode BackOffice)
    private static String MODIF_IP_ETUD = "MODIF_IP_ETUD";
    private static String[] listeFonctions = new String[] {MODIF_IP_ETUD};
    private FonctionsCtrlr ctlFonctions;

    //	private Integer mrsemKey;
    private Session maSession;
    private InscFormationCtrlr inscForm;	// r�f�rence � la formation choisie par ailleurs
    public InscSemestreCtrlr inscSem;		// objet controleur associ� (� initialiser et maj si besoin)

    public InscUeCtrlr unUeCtrlr;

    private NSMutableDictionary cacheInscSem;		// systeme de cache pour stocker les ctrlr de semestres !

    private boolean errDansLesIp;
    private boolean dialogueParcoursDde;		// VRAI si on a demand� l'affichage d'un dialogue de choix du parcours ! 
    private boolean showScolariteAnterieure;
    
    public CadreIp(WOContext context) {
        super(context);
        ctlFonctions = new FonctionsCtrlr(((Session)this.session()).getMesOnglets(),listeFonctions);
        cacheInscSem = new NSMutableDictionary();

        // s'enregistrer pour les notifs (chgt de semestre)
        NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me pr�venir moi-m�me !
        	new NSSelector("changeSemestre",		// via cette m�thode
        	new Class [] {NSNotification.class}),		// argument obligatoire !!!
        	"chgtSemestre",					// la signature de la notif qui m�plait
			(Session)this.session());		// instance de celui qui la poste !
        
        // appel par notification ne fonctionne pas � l'init... autre m�thode donc !
        maSession = (Session)this.session();
    	chargerSemestre(maSession.getInscSemestreParDefaut());
    }

    // Pour initialiser le controleur de formation pour le WO CadreParcours...
    public InscFormationCtrlr leCtlrForm() { return inscForm; }

    // Pour que le cadreUE ait une r�f�rence au bon controleur de semestre
    public InscSemestreCtrlr leCtlrSem() { return inscSem; }

//  ex. de m�thode invoqu�e par notification une fois enregistr� :
    public void changeSemestre(NSNotification laNotif) {
    	// on va analyser ce qu'il y a � faire
    	chargerSemestre(laNotif.userInfo());
    }
    
//    public String decritEtatDialogueParcoursDde() {
//	if (dialogueParcoursDde) return "initi� par user !";
//	else return "PAS initi� par user !";
//    }
    
    // Appel depuis le sous-composant de gestion du dialogue de choix du parcours...
    public boolean etatDdeDialogueParcours() {
	return dialogueParcoursDde;
    }
    
    // Appel depuis le sous-composant de gestion du dialogue de choix du parcours...
    public void termineDialogueEnCours() {
	dialogueParcoursDde = false;
	// on arr�te le dialogue modal...
	((Session)session()).arreteDM();
    }
    
    // retourne l'info indiquant si le dialogue "choix d'un parcours" doit-�tre affich� 
    // � la place de la maquette du semestre/Parcours...
    // VRAI si : 
    // 	- a) semestre � parcours, 
    //	- b) pas de parcours choisi en dehors du parcours commun OU dde de chgt de parcours (click bouton)
    public boolean afficheDialogueParcours() {
		// Si c'est un enseignant qui consulte, renvoyer FALSE
    	if (maSession.estUnEnseignant()) return false;
    	else {
    		boolean affiche = inscForm.isChoixParcoursPossible() & (!inscSem.isParcSpeChoisi() | dialogueParcoursDde );
    		return affiche;
    	}
    }

    public boolean afficheBoutonOuvertureDialogueParcours() {
    	// Si c'est un enseignant qui consulte, renvoyer FALSE
    	if (maSession.estUnEnseignant()) return false;
    	else {

    		boolean a = inscForm.isChoixParcoursPossible();
    		boolean b = !afficheDialogueParcours();
    		boolean c = !inscSem.modeModif();
    		
    		// TODO : hack Qick&Dirty à paramétrer...
    		// PO 2012 : à la demande de la Scol, on interdit aux étudiants de DEG en L1
    		//           de changer leur parcours, initialisé par la scol dans ScolPeda...
    		boolean d = !((inscForm.fspnKey().intValue() == 269 || inscForm.fspnKey().intValue() == 271)
    					&& inscForm.getMsemOrdre().intValue() <= 2);
    		
    		boolean affiche = a & b & c & d;
//  		boolean affiche = inscForm.isChoixParcoursPossible() & !afficheDialogueParcours() 
//  		& !inscSem.modeModif();
    		return affiche;
    	}
    }
    
    // Indicateur pour savoir si l'etudiant doit ou pas commencer par le choix du parcours
    public boolean choixParcoursAFaire() {
	return (inscForm.isChoixParcoursPossible() & !inscSem.isParcSpeChoisi());
    }
    
    public boolean isErrDansLesIp() {
    	return errDansLesIp;
    }

    private void chargerSemestre(NSDictionary userInfo) {
    	// init du semestre en cours !
    	// TODO tester cas d'erreur = pas de semestre par d�faut !!!
    	if (userInfo != null) {

    		errDansLesIp = false;

    		inscForm = (InscFormationCtrlr)userInfo.objectForKey("InscFormCtrlr");
    		inscSem = chercherCtrlrSem(inscForm);

    		// en mode back-office :
    		if (maSession.modeBackOffice()) {
    			// refresh des droits par rapport � ce nouveau diplome/ann�e...
    			String diplAnnee = (Integer)(inscSem.getMonSemestre()).valueForKey("fspnKey")
    			+"-"+(Integer)(inscSem.getMonSemestre()).valueForKey("anneeSuivie");
    			ctlFonctions.refreshDroitsFonctions(diplAnnee);

    			// si pas possible de modifier les choix de l'�tudiant pour ce diplome (droits ScolPeda insuffisants)
    			if (!ctlFonctions.getDroitsModification(MODIF_IP_ETUD))
    				inscSem.consultSeule(true);	// se mettre en mode consultation seulement !
    			else inscSem.consultSeule(false);
    		}
    		// pr�venir la session du ctlr de semestre en cours � pr�sent !
    		maSession.setCtlrSemestreEnCours(inscSem);
    		// puis envoyer une notif� aux CadreUE rattach�s pour qu'ils raffraichissent aussi !
//  		}
//  		catch (Exception e) {
//  		errDansLesIp = true;
//  		// TODO : envoie d'un mail au CRI !
//  		}

    		// AU d�part on ne lance pas le choix d'un parcours...
    		dialogueParcoursDde = false;

    	}    	
    }

    private InscSemestreCtrlr chercherCtrlrSem(InscFormationCtrlr inscForm) {
    	InscSemestreCtrlr semCt = inscForm.getInscSemCt();
    	return semCt;
    }
    
//    private InscSemestreCtrlr chercherCtrlrSem(EOGenericRecord leSem,InscFormationCtrlr inscForm) {
//    	InscSemestreCtrlr semCt;
//    	if (cacheInscSem == null || cacheInscSem.objectForKey(leSem)==null) {
//    		semCt = new InscSemestreCtrlr((Session)this.session(), leSem, inscForm);
//    		cacheInscSem.setObjectForKey(semCt,leSem);
//    	}
//    	else semCt = (InscSemestreCtrlr)cacheInscSem.objectForKey(leSem);
//    	return semCt;
//    }

    
//    public Integer getMrsemKey() {
//    	return mrsemKey;
//    }
    
    public String getDiplome() {
    	if (inscForm != null)
    		return inscForm.diplome();
    	else return ("Diplôme sans IP");
    }
    
//    public int getSemOrdre() {
//	return inscForm.getMsemOrdre().intValue();
////    	if (inscSem.getMonSemestre() !=null)
////    		return ((Integer)inscSem.getMonSemestre().valueForKey("msemOrdre")).intValue();
////    	else return 0;
//    }
    
    public int getMrsemKey() {
    	if (inscSem.getMonSemestre() !=null)
    		return ((Integer)inscSem.getMonSemestre().valueForKey("mrsemKey")).intValue();
    	else return 0;
    }
    
    // Le parcours auquel fait r�f�rence le semestre en cours (si parcours commun, renvoyer chaine vide)
    public String getParcoursInscEnCours() {
	return inscForm.getLibelleParcoursEnCours();
    }

    // Mise en forme sp�ciale pour affichage CadreIP
    public String getParcours() {
	String libParcours = getParcoursInscEnCours();
	if (libParcours != null && libParcours.length() > 0)
	    return (", parcours " + libParcours);
	return ("");
    }
    

    public boolean diplomeNonGere() {
	
    	if (inscForm == null || inscSem.getMonSemestre() ==null) return true;
    	return false;
    }
    
    public NSArray listeUECtrlr() {
//    	if (inscSem == null) return null;
    	return inscSem.getLesUeCtrlr();
    }

    public boolean getModeModif() { return inscSem.modeModif(); }
    
    public WOComponent demanderModif() {
    	inscSem.demanderModif(true);
        return null;
    }

    public WOComponent demanderModifBas() {
    	setAnchor("BAS");
    	return demanderModif();
    }

    public WOComponent annulerModif() {
    	inscSem.annulerModif();
    	return null;
    }

    public WOComponent validerModifBas() throws Exception {
    	validerModif();
    	if (getAnchor()==null) setAnchor("BAS"); // ne pas �craser la mise en �vidence d'une erreur...
    	return null; 
    }

    
    public WOComponent validerModif() throws Exception {
    	if (!inscSem.validerModif(null)) {  // si toutes les modifs sont bien OK lancer la chaine de validations en cascades...
    		setAnchor(inscSem.getDerniereUeAvecErreur());	// sinon la v�rif s'est mal pass�e : se positionner sur la derni�re erreur survenue ! 
    	}
    	return null;
    }
    
    // Que quand les choix pour le semestre sont tous faits... 
    // Appel d'une page traffiquée pour renvoyer le fichier pdf de Jasper, 
    // et non le contenu HTML d'une nouvelle page !
    
    // dans la foulée, envoi a l'étudiant de ce document par mail... pour qu'il puisse le consulter + tard !
    public DownloadFic imprChoixPedag()
    {
    	DownloadFic nextPage = (DownloadFic)pageWithName("DownloadFic");
    	// On passe les éléments controleur...
    	String nomFichier = "ChoixPedagogiques.pdf";
    	NSData lesDatas = genereFicImpressionEtEnvoitParMail(false, nomFichier);
    	// 2) download page pour affichage sur Acrobat Reader du poste client...

    	boolean res = nextPage.initDownloadPDF(lesDatas,nomFichier);
    	if (!res) return null;
    	else return nextPage;
    }

    
    // Génération du fichier pdf récapitulant les choix et envoit par mail... on paramêtre le contenu du message !
    // (soit on vient de valider, soit on a demandé une nouvelle copie)
    protected NSData genereFicImpressionEtEnvoitParMail(boolean validation, String nomFichier) {
    	// Libellé du diplome + semestre + parcours éventuel :
    	String diplSemParc = inscForm.diplome() + ", semestre " + leCtlrForm().getMsemOrdre() + getParcours();

    	NSData lesDatas = inscSem.imprChoixPedag(diplSemParc,inscForm.getMsemOrdre().intValue());

    	// 1) envoi par mail [si c'est autorisé : appli en exploit° seulement !]
    	// --> sinon me renvoyer les mails... 
    	IndividuCtrlr UserReel = ((Session)session()).getIndividuCtrlr();
    	if (UserReel==null || (UserReel != null && UserReel.estUnEtudiant())) {

    		String semestre = "le semestre " + inscForm.getMsemOrdre() + " de " + getDiplome();

    		String leMsg;
    		
    		if (validation) leMsg = "Vous venez de confirmer vos choix concernant les";
    		else leMsg = "Vous avez demandé une copie de vos";
    		leMsg = leMsg+" inscriptions pédagogiques "+ inscForm.anneeUniv() +" pour "+semestre + getParcours()+ ".";
    		leMsg = leMsg+"\nVous trouverez en pièce jointe à ce mail le document récapitulatif édité à cette occasion.";
    		if (validation) leMsg = leMsg+"\n\nCe mail annule et remplace tous les mails de confirmation que vous avez pu recevoir précédemment.";
//  		leMsg = leMsg+"\n(à destination de "+emailEtud+").";
    		leMsg = leMsg+"\n\n[Ceci est un message automatique de l'application IP Web - une réponse à cette adresse ne sera pas lue.";
    		leMsg = leMsg+"\nEn cas de problème sur les données de votre inscription, veuillez contacter votre secrétariat pédagogique...]";

    		maSession.envoitMail("IPWeb : inscription complete et confirmee",leMsg, nomFichier, lesDatas);

    		System.out.println(leMsg);
    	}

    	return lesDatas;
    }
    
    
    
    // Vrai si dialogue modal en cours
    public boolean dmec() {
        return ((Session)criSession()).dmec();
    }
    
    // Clic sur le bouton demandant d'ouvrir le dialogue de choix du parcours !
    public WOComponent lanceDialogueParcours() {
	dialogueParcoursDde = true;
	maSession.demarreDM();
        return null;
    }

    // Clic sur le bouton demandant la confirmation des choix du semestre !
    public WOComponent confirmationChoix() {
    	inscSem.confirmerChoix(true);
    	// envoit un mail à l'étudiant lui rappelant ce qu'il a validé...
        genereFicImpressionEtEnvoitParMail(true, "ChoixPedagogiques.pdf");
        return null;
    }
    
    // Clic sur le bouton demandant l'annulation de la confirmation des choix du semestre, pour modificication !
    public WOComponent annulationValidation() {
    	inscSem.confirmerChoix(false);
    	return null;
    }

	public boolean showScolariteAnterieure() {
		return showScolariteAnterieure;
	}

	public void setShowScolariteAnterieure(boolean showScolariteAnterieure) {
		this.showScolariteAnterieure = showScolariteAnterieure;
	}
    
//  Clic sur le bouton demandant d'annuler le dialogue de choix du parcours !
//    public WOComponent annuleDialogueParcours() {
//	dialogueParcoursDde = false;
//        return null;
//    }

	public WOActionResults afficherScolariteAnterieure() {
		ScolariteAnterieure nextPage = (ScolariteAnterieure)pageWithName(ScolariteAnterieure.class.getName());
		IndividuCtrlr individuCt = ((Session)criSession()).getICEtudiant(); 
        InscriptionCtrlr inscCt = individuCt.monCInsc();
        nextPage.setLesInscriptionsParAnnee(inscCt.getTousLesDiplAnneeCtrlParAnneeUniv());
		return nextPage;
	}
}    
    