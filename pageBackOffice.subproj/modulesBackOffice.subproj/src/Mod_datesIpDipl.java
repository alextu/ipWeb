//Generated by the WOLips Templateengine Plug-in at 30 juil. 2007 14:02:34


import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSNotification;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSSelector;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.webapp.*;

public class Mod_datesIpDipl extends CRIWebComponent {
	
    private static final int DIAL_AUCUN = 0, DIAL_CHANGE_DATE = 1, DIAL_CHANGE_ETAT = 2, DIAL_COPIE_DATE =3, DIAL_CHANGE_AUTORISE_IP = 4;
    private int dialogueActuel;

    public String nomFormChoixPariteSem = "choixPariteSem";
    
    public NSArray listePariteSem = new NSArray (new String[] { "Pairs", "Impairs" });
    public String itemPariteSem;
    
    private boolean dateDebutConcernee;
    
    
    private DatesDiplCtrlr monDatesDiplCtrlr;

    public NSArray listeDiplSem;		// Liste des semestres (impairs ou pairs) du diplome choisi
    public DateSemCtrlr leDiplSemCourant;	// var de parcours...
    public DateSemCtrlr leDiplSemEnModif;
    public DateSemCtrlr leDiplSemAutoriseIpEnModif;
    
    private boolean afficheSemetresImpairs;	// si vrai, on affiche les semestres impairs...

    private NSTimestamp dateDebut, dateFin;	// pour l'affichage puis la r�cup�ration...
    private String msgErreur;
    
    public Integer fspnKey;
    public Integer msemKey, msemKeyPc, mueKey;
    
    public EOGenericRecord eoDiplSelected;
    
    // ----------- CONSTRUCTEUR ------------
    public Mod_datesIpDipl(WOContext context) {
    	super(context);

//  	System.out.println("ZZZZZZZZZZZZZZZZZZZZZZZZZ  init mod datesIpDipl");

    	monDatesDiplCtrlr = new DatesDiplCtrlr((Session)session());
//  	listeDipl = monDatesDiplCtrlr.listeDiplomesVisibles();

    	afficheSemetresImpairs = true;
    	
        // s'enregistrer pour les notifs (chgt d'année en cours)
        NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
        	new NSSelector("chgtAnnee",							// via cette méthode
        	new Class [] {NSNotification.class}),				// argument obligatoire !!!
        	"chgtAnneeEnCours",									// la signature de la notif qui me plait
			(Session)this.session());					// instance de celui qui la poste !

    }

    
    //  -----------------------------------------------------    
    //  ------------- Reponse aux notifications -------------
    //  -----------------------------------------------------    
    
    /// Un changement d'année vient d'avoir lieu...
    public void chgtAnnee(NSNotification laNotif) {
    	afficheSemetresImpairs = true;
    	fspnKey = null;
    }
    

    
    //  --------------------------------------------------------    
    //  ---------------- Expr. conditionnelles -----------------
    //  --------------------------------------------------------    
    
    // Pour n'afficher le détail que quand un diplôme est choisi ...
    public boolean isDiplChoisi() {
	return (fspnKey != null);
	//	return monDatesDiplCtrlr.getPopUpDACTDiplome().isItemChoisi();
    }

    
    // Est-ce que le user à un droit de modif sur le semestre en cours d'affichage ?
    // ET est-ce qu'un dialogue n'est pas déja en cours ?
    public boolean isModifAutorisee() {
    	if (semCourantEnModif()) return false;
    	return (monDatesDiplCtrlr.isModifAutorisee((leDiplSemCourant.getMsemOrdre()).intValue()));
    }
    
//    public boolean isModifNonAutorisee() { return !isModifAutorisee(); }
    
    // Est-ce que le user à un droit de modif sur le semestre en cours d'affichage ?
    // ET est-ce qu'un dialogue n'est pas déja en cours ?
    public boolean isModifIpRdbltAutorisee() {
    	return (monDatesDiplCtrlr.isModifAutorisee((leDiplSemCourant.getMsemOrdre()).intValue()));
    }
      
    
    // Indiquer si la ligne semestre parcouru actuellement est en modif...
    public boolean semCourantEnModif() {
    	if (leDiplSemEnModif == null || leDiplSemEnModif != leDiplSemCourant) return false;
    	if (dialogueActuel != DIAL_CHANGE_DATE) return false;
    	return true;
    }

    // Indiquer si la ligne semestre parcouru actuellement est en modif...
    public boolean semCourantAutoriseIpEnModif() {
    	if (leDiplSemAutoriseIpEnModif == null || leDiplSemAutoriseIpEnModif != leDiplSemCourant) return false;
    	if (dialogueActuel != DIAL_CHANGE_AUTORISE_IP) return false;
    	return true;
    }
    
    
//    public boolean recopieDatesPossible() {
//	return (isChangeable() && (isModifAutorisee() || semCourantEnModif()));
//    }
//    
    public boolean recopieDateDebutPossible() {
	return (!isIntegre() 
		&& leDiplSemCourant.dateDebutIpSem() != null
		&& nbreDatesIpModifiables(true)>1);
    }

    /*
    public boolean recopieDateDebutImpossible() {
    	return (!recopieDateDebutPossible());
    }
        
    public boolean recopieDateFinImpossible() {
    	return (!recopieDateFinPossible());
    }
    */
    
    /// Savoir combien de dates (d�but ou fin) modifiables et diff�rentes il y a
    // dans la liste des semestres affich�s � l'�cran (y compris si dates non sp�cifi�es) :
    private int nbreDatesIpModifiables(boolean debut) {
	if (listeDiplSem == null || listeDiplSem.count()<=1) return 0;
	int res = 0;
	String premiereDate = null;
	NSTimestamp laDate;
	java.util.Enumeration e = listeDiplSem.objectEnumerator();

	while (e.hasMoreElements()) {
	    DateSemCtrlr dsCT = (DateSemCtrlr)e.nextElement();
	    if (debut) laDate = dsCT.dateDebutIpSem();
	    else laDate = dsCT.dateFinIpSem();

	    // si ce couple dipl/sem est ipweb actif et non encore int�gr�...
	    if (dsCT.isIpActif() && !dsCT.isIntegre()) {
		// si sa date debut ou fin non nulle
		if (laDate != null) {
		    // compter les dates diff�rentes
		    String laDateSt = ((Session)session()).monApp.tsFormat(laDate);
		    if (premiereDate == null) {
			premiereDate = laDateSt;
			res++;
		    }
		    else if (laDateSt.compareTo(premiereDate) != 0) res++;
		}
		// sinon ajout d'une date modifiable en +
		else res++;
	    }
	}
	return res;
    }
    
    
    public boolean recopieDateFinPossible() {
	return (!isIntegre() 
		&& leDiplSemCourant.dateFinIpSem() != null
		&& nbreDatesIpModifiables(false)>1);
    }
    
    // Dans quels cas afficher le bouton permettant d'ajouter ce diplome/semestre
    // � la liste des dipl/sem g�r� par ipWeb ?
    public boolean affBtAjouterDiplSemIP() {
    	return(!leDiplSemCourant.isIpActif()) && (monDatesDiplCtrlr.isModifAutorisee((leDiplSemCourant.getMsemOrdre()).intValue()));
    }
    
    // Dans quels cas afficher le bouton permettant de retirer ce diplome/semestre
    // � la liste des dipl/sem g�r� par ipWeb ?
    public boolean affBtRetirerDiplSemIP() {
	return(leDiplSemCourant.isIpActif()	&& !isIntegre() && monDatesDiplCtrlr.isModifAutorisee((leDiplSemCourant.getMsemOrdre()).intValue()));
    }

    
    // Indiquer si un dialogue de modif est en cours...
    public boolean dialogueModifEnCours() {
	if (leDiplSemEnModif == null && leDiplSemAutoriseIpEnModif == null) return false;
	else return true;
    }
    
    // Est-ce que l'EO en cours est susceptible de changements ?
    public boolean isChangeable() {
	return (isIpActif() && !isIntegre());
    }
    
    // Est-ce que l'EO en cours fait partie des dipl/semestres "ip_actif" ?
    public boolean isIpActif() {
	return leDiplSemCourant.isIpActif();
//	return monDatesDiplCtrlr.isIpActif(leDiplSemCourant);
    }

    // Est-ce que l'EO en cours fait partie des dipl/semestres d�j� "int�gr�s" ?
    public boolean isIntegre() {
	return leDiplSemCourant.isIntegre();
    }
    
    // y a t'il un msg d'erreur � afficher ?
    public boolean erreurEnCours() {
        return (msgErreur != null);
    }

    // Est-ce que le dialogue pour le chgt d'état est en cours
    public boolean isDialChgtEtat() { return (dialogueActuel == DIAL_CHANGE_ETAT); }

    // Est-ce que le dialogue pour le chgt d'état est en cours
    public boolean isDialChgtIpRdblt() { return (dialogueActuel == DIAL_CHANGE_AUTORISE_IP); }
    
    public boolean isDialReportDate() {
        return (dialogueActuel == DIAL_COPIE_DATE);
    }
    
    //  --------------------------------------------------------    
    //  ---------------- Styles de CSS a renvoyer --------------
    //  --------------------------------------------------------    
    
    public String styleDDIPSem() {
	return styleDatesIPSem(leDiplSemCourant.dateDebutIpSem());
    }

    public String styleDFIPSem() {
	return styleDatesIPSem(leDiplSemCourant.dateFinIpSem());
    }

    private String styleDatesIPSem(NSTimestamp laDate) {
	if (laDate != null)
	    return "DateIpSem";
	else return "DateIpDom";
    }

    public String styleDDIPDom() {
	return styleDatesIPDom(leDiplSemCourant.dateDebutIpSem());
    }

    public String styleDFIPDom() {
	return styleDatesIPDom(leDiplSemCourant.dateFinIpSem());
    }
    
    private String styleDatesIPDom(NSTimestamp laDate) {
	if (laDate != null || semCourantEnModif())
	    return "DateIpDom";
	else return "DateIpSem";
    }
    
    //  --------------------------------------------------------    
    //  ---------------- Valeurs à afficher  -------------------
    //  --------------------------------------------------------    

    // Selon la parité des semestres à afficher, renvoyer "pairs" ou "impairs"
    public String pariteSemestres() {
	if (afficheSemetresImpairs) return "impairs";
	else return "pairs";
    }

    // Demander à voir le diplome choisi, si un diplome est bien choisi :
    public String getDiplomeChoisi() {
	if (eoDiplSelected != null)
	    return (String)eoDiplSelected.valueForKey("diplome");
	else return null;
    }

    public String typeRecopieDate() {
	if (dateDebutConcernee) return "début";
	else return "fin";
    }    

    public String getStDateSource() {
	NSTimestamp laDate;
	if (dateDebutConcernee) 
	    laDate = leDiplSemEnModif.dateDebutIpSem();
	else
	    laDate = leDiplSemEnModif.dateFinIpSem();
        return ((Session)session()).monApp.tsFormat(laDate);
    }
    
    public String getPariteSelected() {
	if (afficheSemetresImpairs) return "Impairs";
	else return "Pairs";
    }

    public void setPariteSelected(String newPariteSelected) {
	if (newPariteSelected.compareTo("Pairs")==0) afficheSemetresImpairs = false;
	else afficheSemetresImpairs = true;
    }

    public String noselString() { return ""; }
    
    // Retourner le texte du bouton :
//    public String libBtVoirSemestres() {
//	String res = "Cliquer pour voir les sem.";
//	if (!afficheSemetresImpairs) return res+"impairs";
//	else return res+"pairs";
//    }

    // Si les dates d'IP NE PEUVENT CHANGER, indiquer pourquoi :
    public String msgIpDiplSemNonChangeable() {
        if (!isIpActif()) return ("non gere par IP Web");
        else return ("Integration IP faite");
    }
    
    // La date mise en forme de d�but des IP pour le dipl�me lui-m�me...
    public String getDateDebutDiplCour() {
	return getDateDipl(leDiplSemCourant.dateDebutIpSem());
    }
    
    private String getDateDipl(NSTimestamp laDate) {
	String res;
	if (laDate != null)
		res = ((Session)session()).monApp.tsFormat(laDate);
	else res = "pas de date specifique.";
	return (res);
    }
    
    public String getLibDateDebutDomCour() {
	return getDateDom(leDiplSemCourant.dateDebutIpDom());
    }
    
    private String getDateDom(NSTimestamp laDate) {
	String res;
	if (laDate != null)
		res = ((Session)session()).monApp.tsFormat(laDate);
	else res = "pas de date !";
	return (res);
    }
    
    
    public String getDateFinDiplCour() {
	return getDateDipl(leDiplSemCourant.dateFinIpSem());
    }
    
    public String getLibDateFinDomCour() {
        return getDateDom(leDiplSemCourant.dateFinIpDom());
    }
    
    public String getMsgErreur() {
        return msgErreur;
    }
    
    public String getMsgConfirmerChgtEtat() {
    	if (leDiplSemCourant == leDiplSemEnModif && dialogueActuel == DIAL_CHANGE_ETAT)
    		return ("Confirmation ?");
    	else return ("");
    }

    public String getMsgConfirmerChgtEtatIpRdblt() {
    	if (leDiplSemCourant == leDiplSemAutoriseIpEnModif && dialogueActuel == DIAL_CHANGE_AUTORISE_IP)
    		return ("Confirmer...");
    	else return ("");
    }

    public Integer getSemOrdreChgtEtat() {
	if (leDiplSemEnModif != null)
	    return leDiplSemEnModif.getMsemOrdre();
	else if (leDiplSemAutoriseIpEnModif != null)
	    return leDiplSemAutoriseIpEnModif.getMsemOrdre();
	return null;
    }
    
//    public String fctSubmitChoixDipl() {
//        return "document."+nomFormChoixDipl+".submit();";
//    }

    public String fctSubmitChoixPariteSem() {
        return "document."+nomFormChoixPariteSem+".submit();";
    }

    
    //  --------------------------------------------------------    
    //  ---------------- Valeurs en E/S      -------------------
    //  --------------------------------------------------------    

    public NSTimestamp getContenuDateDebut() {
//	NSTimestamp laDate = libDate("ipDatesDebut");
//	if (laDate == null) laDate = libDate("ipDatesDebutDom");
//	if (laDate == null) laDate = new NSTimestamp();
        return (dateDebut);
    }

    public void setContenuDateDebut(NSTimestamp newContenuDateDebut) {
	dateDebut = newContenuDateDebut;
//	dateDebut = ((Session)session()).monApp.verificationDate(newContenuDateDebut);
//	if (nouvDateDebut != null)
//	    System.out.println("-------------------->Debut "+nouvDateDebut.toString());
//	else
//	    System.out.println("-------------------->Debut : effac� !!!!");
    }

    public NSTimestamp getContenuDateFin() {
//	NSTimestamp laDate = libDate("ipDatesFin");
//	if (laDate == null) laDate = libDate("ipDatesFinDom");
//	if (laDate == null) laDate = new NSTimestamp();
        return (dateFin);
    }

    public void setContenuDateFin(NSTimestamp newContenuDateFin) {
	dateFin = newContenuDateFin;
//	NSTimestamp nouvDateFin = ((Session)session()).monApp.verificationDate(newContenuDateFin);
//	if (nouvDateFin != null)
//	    System.out.println("-------------------->Fin "+nouvDateFin.toString());
//	else
//	    System.out.println("-------------------->Fin : effac� !!!!");
    }


    // Setter appel� depuis sous-composant !!!
//    public void setFspnKey(Integer newFspnKey) {
//        fspnKey = (Integer)newFspnKey;
//    }
//    
//    public void setMsemKeyPc(Integer newMsemKey) {
//    }
//    public void setMsemKey(Integer newMsemKey) {
//    }
//    public void setMueKey(Integer newMueKey) {
//    }

    
    //  --------------------------------------------------------    
    //  ------------------------- ACTIONS ----------------------
    //  --------------------------------------------------------    
    
    // On veut sélectionner un diplome... fetcher les détails à afficher
    public WOComponent voirDatesDiplome() {

    	// NSLog.err.appendln("********************>>>>>>>>>>  On genre l'action voirDatesDiplome() !!!!!");

    	if (fspnKey != null)
    		monDatesDiplCtrlr.chargerDatesDipl(fspnKey);
    	listeDiplSem = monDatesDiplCtrlr.getListeDiplSemParite(afficheSemetresImpairs);
    	leDiplSemEnModif = null;
    	dialogueActuel = DIAL_AUCUN;
    	return null;
    }

    // Si parité = pair alors afficher semestres impairs et inversement...
    public WOComponent changerPariteSemestres() {
    	if (afficheSemetresImpairs)
    		listeDiplSem = monDatesDiplCtrlr.getListeDiplSemParite(afficheSemetresImpairs);
    	else
    		listeDiplSem = monDatesDiplCtrlr.getListeDiplSemParite(afficheSemetresImpairs);
    	return null;
    }

//    public PopUpDataAccessCtrlr getPopUpDACT() { 
//	return monDatesDiplCtrlr.getPopUpDACTDiplome(); 
//    }

    
    // On veut que la date DE DEBUT sur laquelle on vient de cliquer
    // soit recopi�e pour toutes les autres dates de d�but d'IP modifiables
    // pour les autres semestres de m�me parit�...  
    public WOComponent recopierDatesDebut() {
	helperRecopierDatesFin(true);
        return null;
    }

    // On veut que la date DE FIN sur laquelle on vient de cliquer
    // soit recopi�e pour toutes les autres dates de FIN d'IP modifiables
    // pour les autres semestres de m�me parit�...  
    public WOComponent recopierDatesFin() {
	helperRecopierDatesFin(false);
        return null;
    }

    private void helperRecopierDatesFin(boolean dateDebutC) {
	leDiplSemEnModif = leDiplSemCourant;
	dialogueActuel = DIAL_COPIE_DATE;
	dateDebutConcernee = dateDebutC;
    }
    
    
    // Dialogue � g�rer...
    
    public WOComponent ModifierDates() {
    	leDiplSemEnModif = leDiplSemCourant;
    	dateDebut = leDiplSemEnModif.dateDebutIpSem();
    	dateFin = leDiplSemEnModif.dateFinIpSem();
    	dialogueActuel = DIAL_CHANGE_DATE;
    	return null;
    }
    
    // Je veux modifier les dates d'IP Web pour le dipl/sem en cours de modif...
    public WOComponent validerDates() {
	msgErreur = leDiplSemEnModif.changerDatesIpPourSem(dateDebut, dateFin);
	if (msgErreur != null)
	    NSLog.err.appendln(msgErreur);
	else terminerToutDialogue();
	return null;
    }

    private void terminerToutDialogue() {
	leDiplSemEnModif = null;
	leDiplSemAutoriseIpEnModif = null;
	dialogueActuel = DIAL_AUCUN;
    }
    
    public WOComponent annulerModifsDates() {
	terminerToutDialogue();
        return null;
    }

    // Je veux ajouter ce dipl/sem dans la liste des dipl/sem actifs pour IP_Web
    public WOComponent ajouterDiplSem() {
	leDiplSemCourant.changerActivite(true);
        return null;
    }

    // Je veux retirer ce dipl/sem de la liste des dipl/sem actifs pour IP_Web
    // initier un dialogue pour confirmer (ou non) 
    public WOComponent retirerDiplSem() {
	leDiplSemEnModif = leDiplSemCourant;
	dialogueActuel = DIAL_CHANGE_ETAT;
        return null;
    }
    
    
    public WOComponent confirmerRetirerDiplSem() {
	leDiplSemEnModif.changerActivite(false);
	terminerToutDialogue();
        return null;
    }

    public WOComponent annulerRetirerDiplSem() {
	terminerToutDialogue();
	return null;
    }


    public WOComponent confirmerReporterDate() {
    	// TODO : coeur de la m�thode � faire !!!
    	java.util.Enumeration e = listeDiplSem.objectEnumerator();
    	// La nouvelle date � propoager :
    	NSTimestamp laNouvelleDate = dateDebutConcernee? leDiplSemEnModif.dateDebutIpSem() : leDiplSemEnModif.dateFinIpSem();
    	while (e.hasMoreElements()) {
    		DateSemCtrlr ddCT = (DateSemCtrlr)e.nextElement();
    		// est-ce que ce semestre doit et peut �tre modifi� pour sa date de d�but/fin ?
    		if (ddCT != leDiplSemEnModif && ddCT.isIpActif() && !ddCT.isIntegre()) {
    			ddCT.changerDatesIpPourSem(laNouvelleDate, dateDebutConcernee);
    		}
    	}

    	terminerToutDialogue();
    	return null;
    }

    public WOComponent annulerReporterDate() {
	terminerToutDialogue();
        return null;
    }

// le Switch pour var. d'état O/N (autoriseRdblt)
    public WOComponent changeAutorisationIpRedblt()
    {
        leDiplSemAutoriseIpEnModif = leDiplSemCourant;
        dialogueActuel = DIAL_CHANGE_AUTORISE_IP;
        return null;
    }


    public WOComponent validerChgtAutoriseIp()
    {
    	if (leDiplSemAutoriseIpEnModif != null) {
    		String diplSem = getDiplomeChoisi() + ", sem." + getSemOrdreChgtEtat().intValue();
    		leDiplSemAutoriseIpEnModif.changerAutoriseIPRdblt(diplSem);
    	}
        terminerToutDialogue();
        return null;
    }

    public WOComponent annulerChgtAutoriseIp()
    {
       terminerToutDialogue();
       return null;
    }

}