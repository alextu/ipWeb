package org.cocktail.ipweb.serveur.components.pagebo;
// Generated by the WOLips Templateengine Plug-in at 13 ao�t 2007 10:28:00
// Modif : PO 12/02/2009 (extension à la gestion des EC, à la place des UE, si le Bindings qui va bien le dde...)

import org.cocktail.fwkcktlwebapp.server.components.CktlWebComponent;
import org.cocktail.ipweb.serveur.Session;
import org.cocktail.ipweb.serveur.components.onglets.OngletsCtrlr;
import org.cocktail.ipweb.serveur.controlleur.PopUpDaFact;
import org.cocktail.ipweb.serveur.controlleur.PopUpDataAccessCtrlr;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSNotification;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSSelector;

public class PopUpMultiDiplSemUe extends CktlWebComponent {

    public final static int TYPE_DIPLSEMUE = 3, TYPE_DIPLSEM = 2, TYPE_DIPL = 1, TYPE_DIPLANNEE = 4;
    protected int typeCtrlr;
    
    public PopUpDataAccessCtrlr popUpDACTdipl, popUpDACTSem, popUpDACTue;	// ctrlr pour les différents POPUP 
    public PopUpDataAccessCtrlr popUpDACTannee; 
    
    protected String cptLogin;
   
    protected boolean fetcherEC = false;
   
    public PopUpMultiDiplSemUe(WOContext context) {
    	super(context);

    	OngletsCtrlr mesOngCt = ((Session)session()).getMesOnglets();
    	cptLogin = mesOngCt.cptLogin();	// on obtient le code de l'utilisateur dans ScolPeda depuis 
    	// le controleur d'onglet (récupéré lors de son init)
    	
    	// REM : Si l'utilisateur n'a pas de droits dans ScolPedagogie (type Hoibian), il faut le prévoir et bloquer le choix des popup


    	// s'enregistrer pour les notifs (chgt d'année en cours)
    	NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
    			new NSSelector("chgtAnnee",							// via cette méthode
    					new Class [] {NSNotification.class}),				// argument obligatoire !!!
    					"chgtAnneeEnCours",									// la signature de la notif qui me plait
    					(Session)this.session());					// instance de celui qui la poste !


    }

    //  -----------------------------------------------------    
    //  ------------- Reponse aux notifications -------------
    //  -----------------------------------------------------    
    
    /// Un changement d'année vient d'avoir lieu...
    public void chgtAnnee(NSNotification laNotif) {
    	if (cptLogin != null) popUpDACTdipl.fetcherLesEo();		// refetcher les diplomes...
    }
    
    
    // On synchronise à la mano !!!
    public boolean synchronizesVariablesWithBindings() { return false; }
    
    // La, les bindings devraient être OK !?
    public void awake() {
    	if (cptLogin != null && popUpDACTdipl == null) 
    		creationPopUpCtlr();
    	
    	verifDdeRefetch();
    }
    
    // Creation du controleur pour le composant PopUpSelection des diplomes visibles...
    // ATTENTION : à ne pas lancer à l'init du composant, car à ce moment les bindings (dynamiques !) ne sont pas encore faits !!!
    protected void creationPopUpCtlr() {
    	// afficher les Bindings...
//    	java.util.Enumeration enu = bindingKeys().objectEnumerator();
//    	while (enu.hasMoreElements()) {
//    		NSLog.err.appendln((String)enu.nextElement()+"\n");
//    	}

    	// Quel est le nombre de popUp imbriqués à faire apparaitre ?
    	typeCtrlr = TYPE_DIPLSEMUE;	// sauf si le binding le spécifie autrement !
    	if (hasBinding("typeSelection")) {
    		try { 
    			typeCtrlr = ((Integer)valueForBinding("typeSelection")).intValue();
    		}
    		catch (Exception e) {
    			NSLog.err.appendln("Pb avec le binding 'typeSelection' "+
    					valueForBinding("typeSelection").toString()+" : résultat pas du bon type !");
    		}
    	}

    	int typeDactDipl = PopUpDaFact.DACT_DIPLOME;
    	
    	// ATTENTION / MODIF A FAIRE :
    	// choix de la vue ou prendre les diplomes visibles ....
    	if (hasBinding("listeDiplPourRN")) {
    		try { 
    			String diplPourRN = ((String)valueForBinding("listeDiplPourRN")).toUpperCase();
    			if (diplPourRN.equalsIgnoreCase("O"))
    				typeDactDipl = PopUpDaFact.DACT_DIPLRN;
    		}
    		catch (Exception e) {
    			NSLog.err.appendln("Pb avec le binding 'listeDiplPourRN' "+
    					valueForBinding("typeSelection").toString()+" : résultat pas du bon type ('O' ou 'N') !");
    		}
    	}    	
 
    	
    	// On commence par le premier PopUp de la série des popUp imbriqués...
    	// dans tous les cas !
    	popUpDACTdipl = PopUpDaFact.creerPopUpDACT(typeDactDipl, ((Session)session()), true, this);

    	if (typeCtrlr == TYPE_DIPLSEM || typeCtrlr == TYPE_DIPLSEMUE) {
    		popUpDACTSem  = PopUpDaFact.creerPopUpDACT(PopUpDaFact.DACT_SEMPARCOURS, ((Session)session()), true,popUpDACTdipl);
    		popUpDACTdipl.setDACTEsclave(popUpDACTSem);

    		if (typeCtrlr == TYPE_DIPLSEMUE) {

    	       	int typeDactUeOuEc = PopUpDaFact.DACT_UE;
    	       	// ATTENTION / BINDING A POSITIONNER DANS LE COMPOSANT UTILISATEUR :
    	    	// Voir si on va fetcher des UE ou bien des EC ....
    	    	if (hasBinding("fetchEc")) {
    	    		try { 
    	    			if (((Boolean)valueForBinding("fetchEc")).booleanValue()) {
    	    				typeDactUeOuEc = PopUpDaFact.DACT_EC;
    	    				fetcherEC = true;
    	    			}
    	    		}
    	    		catch (Exception e) {
    	    			NSLog.err.appendln("Pb avec le binding 'fetchEc' "+
    	    					valueForBinding("fetchEc").toString()+" : résultat pas du bon type !");
    	    		}
    	    	}    	
    			popUpDACTue = PopUpDaFact.creerPopUpDACT(typeDactUeOuEc, ((Session)session()), true,popUpDACTSem);
    			popUpDACTSem.setDACTEsclave(popUpDACTue);
    		}
    	}
    	else if (typeCtrlr == TYPE_DIPLANNEE) {
    		popUpDACTannee = PopUpDaFact.creerPopUpDACT(PopUpDaFact.DACT_ANNEE, ((Session)session()), true,popUpDACTdipl);
    		popUpDACTdipl.setDACTEsclave(popUpDACTannee);
    	}
    	
    	popUpDACTdipl.fetcherLesEo();
    }

    // On vérifie au moment du AWake si le composant parent ne demande pas un raffraichissement de la liste des diplômes...
    protected void verifDdeRefetch() {
    	boolean ddeRefetch = false;
    	
    	if (hasBinding("refetchSelection")) {
    		try { 
    			ddeRefetch = ((Boolean)valueForBinding("refetchSelection")).booleanValue();
    		}
    		catch (Exception e) {
    			NSLog.err.appendln("Pb avec le binding 'refetchSelection' "+
    					valueForBinding("refetchSelection").toString()+" : résultat pas du bon type !");
    		}
    		if (ddeRefetch) {
    			popUpDACTdipl.fetcherLesEo();
    			setValueForBinding(new Boolean(false), "refetchSelection");
    		}
    	}
    	
    }
    
    
    // Verifier si le composant parent a un binding pour "action" et si oui l'appelle !!!
    public WOActionResults  performAction1() {
    	return performActionGlobal(TYPE_DIPL);
    }

    public WOActionResults  performAction2() {
    	return performActionGlobal(TYPE_DIPLSEM);
    }    

    public WOActionResults  performAction3() {
    	return performActionGlobal(TYPE_DIPLSEMUE);
    }
    
    public WOActionResults  performActionAnnee() {
    	return performActionGlobal(TYPE_DIPLANNEE);
    }

    protected WOActionResults performActionGlobal(int typeCt) {
	// Cas ou l'action correspond a la selection d'une valeur (ou suite de valeurs) dans la liste :
	if (isSelectionComplete(typeCt)) {
	    // On ne fait l'action que s'il s'agit du "niveau approprie"
	    if (typeCtrlr == typeCt && hasBinding("action")) {
		bindingsAFaire();
		return performParentAction((String)valueForBinding("action"));
	    }
	}
	//Cas ou on deselectionne une PopUp necessaire (prevenir user !)
	else bindingsAFaire();
	return null;
    }
    
    
    // selon le type de controleur actif (dipl/sem/UE), indiquer si une selection complete est dispo
    protected boolean isSelectionComplete(int typeCt) {
    	switch(typeCtrlr) {
    	case TYPE_DIPL : return (popUpDACTdipl.isItemChoisi());
    	case TYPE_DIPLSEM : return (popUpDACTdipl.isItemChoisi() && popUpDACTSem.isItemChoisi()); 
    	case TYPE_DIPLANNEE : return (popUpDACTdipl.isItemChoisi() && popUpDACTannee.isItemChoisi());
    	case TYPE_DIPLSEMUE : return (popUpDACTdipl.isItemChoisi() 
    			&& popUpDACTSem.isItemChoisi()
    			&& popUpDACTue.isItemChoisi());
    	}
    	return false;
    }
    
    protected void bindingsAFaire() {
    	switch(typeCtrlr) {
    	case TYPE_DIPL : 
    		setBindingsNivDipl();
    		setBindingsParentEO("eoSelectionne",popUpDACTdipl);
    		break;
    	case TYPE_DIPLSEM :  
    		setBindingsNivDipl();
    		setBindingsNivSem();
    		setBindingsParentEO("eoSelectionne",popUpDACTSem);
    		break;
    	case TYPE_DIPLANNEE :
    		setBindingsNivDipl();
    		setBindingsNivAnnee();
    		setBindingsParentEO("eoSelectionne",popUpDACTannee);
    		break;    		
    	case TYPE_DIPLSEMUE : 
    		setBindingsNivDipl();
    		setBindingsNivSem();
    		setBindingsNivUe();
    		setBindingsParentEO("eoSelectionne",popUpDACTue);
    		break;    	    
    	}
    }
    
    // Les bindings du parent à positionner ...
    protected void setBindingsNivDipl() {
    	setBindingsParentAvec("fspnKey","fspnKey",popUpDACTdipl);
    }
    
    protected void setBindingsNivSem() {
    	setBindingsParentAvec("anneeSuivie","fhabNiveau",popUpDACTSem);
    	setBindingsParentAvec("msemOrdre","msemOrdre",popUpDACTSem);
    	setBindingsParentAvec("msemKey","msemKey",popUpDACTSem);
    	setBindingsParentAvec("msemKeyPc","msemKeyPc",popUpDACTSem);
    }

    protected void setBindingsNivAnnee() {
    	setBindingsParentAvec("fhabNiveau","fhabNiveau",popUpDACTannee);
    }

    protected void setBindingsNivUe() {
    	setBindingsParentAvec("mueKey","mueKey",popUpDACTue);
    }

    
    protected boolean setBindingsParentAvec(String nomBindingParent, String nomClePopUp,
	    PopUpDataAccessCtrlr lePopupCT) {
	// est-ce que c'est faisable cote parent !?
	if (canSetValueForBinding(nomBindingParent)) {
	    // est-ce qu'un item est chois ?
	    if (lePopupCT.isItemChoisi()) 
		setValueForBinding(lePopupCT.valeurDeCle(nomClePopUp), nomBindingParent);
	    // sinon mettre � NULL le bindings !
	    else setValueForBinding(null, nomBindingParent);
	    return true;
	}
//	else NSLog.err.appendln("Pb : le parent n'a pas de m�thode setter pour le Binding '"+
//		nomBindingParent+"' !");
	return false;
    }
    
    protected boolean setBindingsParentEO(String nomBindingEOParent, PopUpDataAccessCtrlr lePopupCT) {
	// est-ce que c'est faisable c�t� parent !?
	if (canSetValueForBinding(nomBindingEOParent)) {
	    // est-ce qu'un item est chois ?
	    if (lePopupCT.isItemChoisi()) 
		setValueForBinding(lePopupCT.getItemChoisi(), nomBindingEOParent);
	    else setValueForBinding(null, nomBindingEOParent);
	    return true;
	}
//	else NSLog.err.appendln("Pb : le parent n'a pas de m�thode setter pour le Binding EO '"+
//		nomBindingEOParent+"' !");
	return false;
    }
    
    // V�rifier ce qu'il faut afficher comme popUp :
    public boolean isDiplSemPlus() { return (typeCtrlr == TYPE_DIPLSEM || typeCtrlr == TYPE_DIPLSEMUE); }
    public boolean isDiplSemUe() { return (typeCtrlr == TYPE_DIPLSEMUE); }
    public boolean isDiplAnnee() { return (typeCtrlr == TYPE_DIPLANNEE); }
    
    // Ne pas afficher les popup : aucuns droits !!!
    public boolean aucunsDroit() {
    	return (cptLogin == null);
    }
    

    public Integer getFannKey() { 
    	System.out.println("annee new = "+((Session)session()).getAnneeEnCours());
    	return new Integer(((Session)session()).getAnneeEnCours());
    	}

    // Obsolète depuis la version 2.4...
//    public Integer getDlogKey() { return dlogKey; }

    public String getCptLogin() { return cptLogin; }
    
    
    // Le libellé du 3éme PopUp dépend du Bindings fetchEc...
    public String libPopUp3() {
    	if (fetcherEC) return "EC : ";
    	else return "UE avec choix : ";
    }
    
}