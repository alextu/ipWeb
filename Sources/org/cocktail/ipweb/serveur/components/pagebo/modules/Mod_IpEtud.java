package org.cocktail.ipweb.serveur.components.pagebo.modules;
// Generated by the WOLips TemplateEngine Plug-in at 31 oct. 2006 10:16:45


import org.cocktail.fwkcktlwebapp.server.components.CktlWebComponent;
import org.cocktail.ipweb.serveur.Session;
import org.cocktail.ipweb.serveur.controlleur.IndividuCtrlr;
import org.cocktail.ipweb.serveur.controlleur.InscriptionCtrlr;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSNotification;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSSelector;

public class Mod_IpEtud extends CktlWebComponent {

	private boolean etudiantEnCours;
	public boolean modeDetailIp;		// Si vrai, on détaille les choix de l'étudiant, son on affiche les logs...
	private Integer etudNum, msemKey;	// données pour changer d'étudiant ET de semestre à afficher...
	
	public String erreurEtud;

	// Affichage de la scolarité antérieure de l'étudiant
	private boolean modeScolariteAnterieure;
	private NSDictionary lesInscriptionsParAnnee;
	private WOComponent previousPage;
	
    public Mod_IpEtud(WOContext context) {
        super(context);
        
        etudiantEnCours = false;		// il faudra d'abord choisir un �tudiant !
        modeDetailIp = true;			// on affichera le détail de ses IP d'abord
        etudNum = null;	
        msemKey = null;
//        etudNum = new Integer(11126);	// TODO : enlever !
        erreurEtud = null;
        
        // s'enregistrer pour les notifs (chgt d'année en cours)
        NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
        	new NSSelector("chgtAnnee",							// via cette méthode
        	new Class [] {NSNotification.class}),				// argument obligatoire !!!
        	"chgtAnneeEnCours",									// la signature de la notif qui me plait
			(Session)this.session());					// instance de celui qui la poste !
        
        // Notif : choix d'un étudiant/semestre à détailler...
        NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
            	new NSSelector("voirEtudiantEtInscSemestre",	// via cette méthode
            	new Class [] {NSNotification.class}),				// argument obligatoire !!!
            	"chgtEtudiantADetailler",	 						// la signature de la notif qui me plait
    			(Session)this.session());					// instance de celui qui la poste !
        
        
        // Contournement d'un "pb de conception" : la première fois qu'on vient sur l'onglet affichant ce composant
        // ce peut-être au moment d'afficher le détail d'un étudiant pour un autre onglet... qui a lancé une notif AVANT
        // que cet objet n'ait besoin d'être créé (et donc ne s'enregistre pour recevoir les notifs !!!)
        // --> il faut donc dder à la session s'il n'y a pas un étudiant à afficher dés l'ouverture...
        ((Session)session()).isEtudiantEnAttente();

    }

    //  -----------------------------------------------------    
    //  ----------------- E/S vers le .WOD ------------------
    //  -----------------------------------------------------    

    public String libAutreChoix() {
    	if (modeDetailIp) return ("(=> Voir les logs)");
    	else return ("(=> Détail des IP)");
    }
        
    public boolean etudiantEnCours() { return etudiantEnCours; }
    
   
    //  -----------------------------------------------------    
    //  ---------------- Reponse aux actions ----------------
    //  -----------------------------------------------------    

    public WOComponent changeEtudiant() {
    	// on tente la cr�ation d'un nouveau controleur...
    	if (etudNum != null) {
    		IndividuCtrlr nouvEtud = new IndividuCtrlr(etudNum,(Session)this.session());
    		erreurEtud = nouvEtud.getErreur();
    		if (erreurEtud == null || erreurEtud.equals("")) {
    			((Session)this.session()).signaleChgtEtud(nouvEtud, msemKey);
    			etudiantEnCours = true;
    		}
    		setModeScolariteAnterieure(false);
     	}
        return null;
    }

    
    public WOComponent swapAutreChoix() {
    	if (modeDetailIp) modeDetailIp = false;
    	else modeDetailIp = true;
    	setModeScolariteAnterieure(false);
        return null;
    }
    
    public WOActionResults toInscriptionActuelle() {
    	setModeScolariteAnterieure(false);
    	modeDetailIp = true;
    	return null;
    }
    
    //  -----------------------------------------------------    
    //  ------------- Reponse aux notifications -------------
    //  -----------------------------------------------------    
    
    /// Un changement d'année vient d'avoir lieu...
    public void chgtAnnee(NSNotification laNotif) {
    	msemKey = null;
    	changeEtudiant();
    }

    // On veut connaitre le détail d'un étudiant...
    public void voirEtudiantEtInscSemestre(NSNotification laNotif) {
    
    	// en paramêtres de la notif : le n° étudiant et le msemKey...
    	// Et le mode d'affichage (détail des choix ou logs)
    	modeDetailIp = ((Boolean)laNotif.userInfo().valueForKey("detaillerIp")).booleanValue();
    	EOGenericRecord etudiant  = (EOGenericRecord)laNotif.userInfo().valueForKey("etudiant");
    	if (etudiant != null) {
    		etudNum = (Integer)etudiant.valueForKey("etudNumero");
    		msemKey = (Integer)etudiant.valueForKey("msemKey");
    		changeEtudiant(); 
    	}
    }
    
  
    public WOActionResults toScolariteAnterieure() {
		IndividuCtrlr individuCt = ((Session)cktlSession()).getICEtudiant(); 
        InscriptionCtrlr inscCt = individuCt.monCInsc();
        setLesInscriptionsParAnnee(inscCt.getTousLesDiplAnneeCtrlParAnneeUniv());
        setPreviousPage(getPage());
        setModeScolariteAnterieure(true);
        modeDetailIp = false;
		return null;
	}
    
	private WOComponent getPage() {
		WOComponent currentComponent = this;
		while (!currentComponent._isPage()) {
			currentComponent = currentComponent.parent();
		}
		return currentComponent;
	}
    
    //  public WOComponent changeIndividu(){
// 	CompteCtrlr monCC = ((Session)session()).getCtrlrCompte();
// 	if(monCC.changeCompte((Session)session(),nouvLogin)==false)
// 	{
// 		nouvLogin += " Inconnu !!!";
// 		return null;
// 	}
// 	// Le chgt peut commencer !
// 	IndividuCtrlr indC = ((Session)session()).getIndividuCtrlr();
// 	indC.changeIndividuForPersId(monCC.persId());
// 	
// 	LRUserInfoDB user = new LRUserInfoDB(criApp.dataBus());
// 	user.compteForPersId(monCC.persId(),true);
// 	criSession().setConnectedUserInfo(user);
// 	Main page =  (Main)pageWithName("Main");		// Cr�ation d'une nouvelle page container
// 	// a partir de la, tous les constructeurs des composants seront appel�s au fur et � mesure
// 	// de leur invocation (apparition selon le choix des onglets !)
// 													
// 	page.login = nouvLogin;
// 	((Session)session()).setCtrlrCompte(monCC);
// 	PhotoCtrlr nouvPhCtrl = new PhotoCtrlr((Session)session());
// 	((Session)session()).setPhotoCtrlr(nouvPhCtrl);
// 	
//
// 	// Chgt des menus =>
//		// R�-Init des onglets en fonction de cette nouvelle personne :
//		OngletsCtrlr lesOnglets = ((Session)session()).getMesOnglets();
//		lesOnglets.initDroitsMenu();
//		((Session)session()).getMenuCtrlr().setOnglets(lesOnglets.listeOnglets(),
//				lesOnglets.lesTitresDesOnglets());	
//
//		
//		return page.toProfile();
// }

    public boolean estEnseignant() {
        return (((Session)session()).getIndividuCtrlr().estUnEnseignant());
    }
    

	public Integer getEtudNum() {
		return etudNum;
	}
	
	public void setEtudNum(Integer etudNum) {
		this.etudNum = etudNum;
	}
	
	public void setModeScolariteAnterieure(boolean modeScolariteAnterieure) {
		this.modeScolariteAnterieure = modeScolariteAnterieure;
	}
	
	public boolean isModeScolariteAnterieure() {
		return modeScolariteAnterieure;
	}
	
	public NSDictionary getLesInscriptionsParAnnee() {
		return lesInscriptionsParAnnee;
	}
	
	public void setLesInscriptionsParAnnee(NSDictionary lesInscriptionsParAnnee) {
		this.lesInscriptionsParAnnee = lesInscriptionsParAnnee;
	}
	
	public WOComponent getPreviousPage() {
		return previousPage;
	}
	
	public void setPreviousPage(WOComponent previousPage) {
		this.previousPage = previousPage;
	}
}