package org.cocktail.ipweb.serveur.components.pagebo.modules;
// Generated by the WOLips Template engine Plug-in at 14 ao�t 2007 08:36:31

import org.cocktail.fwkcktlwebapp.server.components.CktlWebComponent;
import org.cocktail.ipweb.serveur.Session;
import org.cocktail.ipweb.serveur.controlleur.CommentCtrlr;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSNotification;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSSelector;

public class Mod_commentaires extends CktlWebComponent {

    private static final int DIAL_AUCUN = 0, DIAL_MODIF = 1;
    private int dialogueActuel;

    private static final int CHOIXDIAL_DETAIL_EC = 1, CHOIXDIAL_GESTION_COMMENT = 2;
    private static final int dsSaisieComment = 1, dsChoixDansListeComment = 2, dsAffSimpleComment = 3, dsSupprComment = 4, dsNouvComment = 5;
    private int choixDial, etatDialComment;
    
    private boolean autBtModifier, autBtSupprimer, autBtAssocier, autBtNouveau, phaseValidModif;
    
    public CommentCtrlr monCtComment;

    public NSArray listeEc, listeComment;
    public EOGenericRecord ecEnCours, ecEnModif, commentOccur;
    private EOGenericRecord commentChoisi;
    
    public String nomFormWOBrowser = "formWOB";
    private String texteComment; 

    public Mod_commentaires(WOContext context) {
    	super(context);

    	monCtComment = new CommentCtrlr((Session)session());
    	initsExternes();

    	// s'enregistrer pour les notifs (chgt d'année en cours)
    	NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
    			new NSSelector("chgtAnnee",							// via cette méthode
    					new Class [] {NSNotification.class}),				// argument obligatoire !!!
    					"chgtAnneeEnCours",									// la signature de la notif qui me plait
    					(Session)this.session());					// instance de celui qui la poste !
    }
    
    private void initsExternes() {
        choixDial = CHOIXDIAL_GESTION_COMMENT;
    }
    
    
    //  -----------------------------------------------------    
    //  ------------- Reponse aux notifications -------------
    //  -----------------------------------------------------    
    
    /// Un changement d'année vient d'avoir lieu...
    public void chgtAnnee(NSNotification laNotif) {
    	initsExternes();
    	monCtComment.eoDiplSelected = null;
    }
    

    //  --------------------------------------------------------    
    //  ---------------- Expr. conditionnelles -----------------
    //  --------------------------------------------------------    
    
// Est-ce qu'on a choisi une UE ?
    public boolean isUeChoisi() {
	return (monCtComment.eoDiplSelected != null);
    }
    
    
    // Indiquer si un dialogue de modif est en cours...
    public boolean dialogueModifEnCours() {
    	if (dialogueActuel == DIAL_AUCUN) return false;
    	else return true;
    }
    
    // Est-ce que l'on doit afficher le dialogue de gestion des commentaires ? 
    // (si non : afficher le "d�tail" des EC)
    public boolean afficherDialGestionComment() {
	if (monCtComment.isModifAutorisee() && choixDial == CHOIXDIAL_GESTION_COMMENT)
	    return true;
	else return false;
    }
    
    // pour un EC choisi, dans quel �tat est le dialogue sur son commentaire ?
    public boolean saisieComment() { 
    	return (etatDialComment == dsSaisieComment || etatDialComment == dsNouvComment);
    }

    public boolean choixDansListeComment() { 
    	return (etatDialComment == dsChoixDansListeComment);
    }
    
    public boolean affSimpleComment() {
    	return (etatDialComment == dsAffSimpleComment);
    }
    
    // �tats permettant de savoir quels boutons afficher...
    public boolean affBtModifier() {
    	return autBtModifier;
    }
    public boolean affBtSupprimer() {
    	return autBtSupprimer;
    }
    
    public boolean affBtAssocier() {
    	return autBtAssocier;
    }

    public boolean affBtNouveau() {
    	return autBtNouveau;
    }
    
    public boolean supprComment() {
    	return (etatDialComment == dsSupprComment);
    }


    
    //    // �tats pour savoir si on affiche les boutons d'action sur le commentaire ou le couple Valider/Annuler
//    public boolean phaseValidModif() {
//    	return phaseValidModif;
//    }
    
    //  --------------------------------------------------------    
    //  ---------------- Valeurs � afficher  -------------------
    //  --------------------------------------------------------    

    public String getDetailEcCommentaire() {
    	if (ecEnCours != null) {
    		int lgMax = 150;
    		String res = (String)ecEnCours.valueForKey("mecCode") +
    		" : " + (String)ecEnCours.valueForKey("mecLibelleCourt");

    		// Chopper le commentaire...
    		String com = monCtComment.getComment(ecEnCours,false);

    		if (com != null) {
    			res += "  ---------->>> ";
    			if (com.length()+res.length() > lgMax) 
    				res += com.substring(0,lgMax-res.length()) + "...";
    			else res += com;
    		}
    		return res;
    	}
    	else return null;
    }
    
    // pour le Popup de choix...
    public String libCommentaire() {
    	if (commentOccur != null) {
    		int lgMax = 120;
    		String com = (String)commentOccur.valueForKey("mrecComment");

    		if (com != null && com.length() > lgMax) 
    				com = com.substring(0,lgMax) + "...";
    		return com;
    	}
    	else return null;
    }
    
    
    // Affichage du commentaire ET de son n� d'ID (pour rep�rer les commentaires identiques !)
    public String commentaires() {
    	if (ecEnCours != null)
    		return monCtComment.getComment(ecEnCours, true);

    	return "aucun...";
    }

    
    // Le texte du bouton selon le choix de dialogue en cours...
    public String getTexteBtChoixDial() {
	if (choixDial == CHOIXDIAL_DETAIL_EC)
	    return "Gérer les commentaires...";
	else return "Afficher détails EC";
    }

    // Retourne un submit du formulaire de choix d'EC, � la s�lection dans le WOBrowser...
    public String fctSubmitChoix() {
        return "document."+nomFormWOBrowser+".submit();";
    }
    
    
    public String getRefEcAEditer() {
	if (ecEnModif != null) {
        return (String)ecEnModif.valueForKey("mecCode") +
        " : " + (String)ecEnModif.valueForKey("mecLibelleCourt");
	}
	else return "aucun EC sélectionné";
    }
    
    // Le libellé dépend si un commentaire est déjà associé à cet EC ou pas...
    public String getLibBtCreerNouveau()
    {
    	if (ecEnModif != null && monCtComment.chercherIpUeComment(ecEnModif) != null)
    		return "Créer comme...";
    	else return "Créer Nouveau...";
    }

    //  --------------------------------------------------------    
    //  ---------------- Valeurs en E/S  -----------------------
    //  --------------------------------------------------------    

    // le WOBrowser attend toujours une array, m�me si "multiple" vaut faux...
    public NSMutableArray getEcChoisie() {
	if (ecEnModif != null) {
	    return new NSMutableArray(new Object[] { ecEnModif });
	}
	else return null;
    }
    
    // le WOBrowser nous renvoit toujours une array, m�me si "multiple" vaut faux...
    public void setEcChoisie(NSArray arrayEcChoisis) {
    	if (arrayEcChoisis != null && arrayEcChoisis.count() > 0)
    		ecEnModif = (EOGenericRecord)arrayEcChoisis.objectAtIndex(0);
    }

    // le WOBrowser attend toujours une array, m�me si "multiple" vaut faux...
    public NSMutableArray getCommentChoisi() {
    	if (ecEnModif != null) {
    		EOGenericRecord leComment = monCtComment.chercherIpUeComment(ecEnModif);
    		if (leComment != null) return new NSMutableArray(new Object[] { leComment });
    	}
    	return null;
    }
    
    // le WOBrowser nous renvoit toujours une array, m�me si "multiple" vaut faux...
    public void setCommentChoisi(NSArray arrayCommentChoisi) {
    	if (arrayCommentChoisi != null && arrayCommentChoisi.count() > 0)
    		commentChoisi = (EOGenericRecord)arrayCommentChoisi.objectAtIndex(0);
    }

    public String getCommentEcAEditer() {
    	if (ecEnModif != null) {
    		if (etatDialComment != dsChoixDansListeComment) {
    			String comment = monCtComment.getComment(ecEnModif,false);
    			if (comment != null) return comment;
    			else if (etatDialComment == dsNouvComment) 
    				return null;
    		}
    		else return null;
    	}
    	return "aucun...";
    }

    // Le commentaire a changé -> le conserver dans un tampon, pour le répercuter dans la base si validation...
    public void setCommentEcAEditer(String nouvComment) {
    	texteComment = nouvComment;
    }
    
    //  --------------------------------------------------------    
    //  ------------------------- ACTIONS ----------------------
    //  --------------------------------------------------------    
    
    // On veut afficher une s�lection d'EC pour l'UE choisie... fetcher les d�tails � afficher
    public WOComponent selectUE() {

//	NSLog.err.appendln("********************>>>>>>>>>>  On genere l'action selectUE() !!!!!");

	monCtComment.chargerEC();
	listeEc = monCtComment.getListeEcAChoix();
	ecEnModif = null;
	
	dialogueActuel = DIAL_AUCUN;
	etatDialComment = dsAffSimpleComment;
	return null;
    }

    
    // Switcher les choix de dialogues !
    public WOComponent clickBtChoixDial() {
	if (choixDial == CHOIXDIAL_DETAIL_EC)
	    choixDial = CHOIXDIAL_GESTION_COMMENT;
	else choixDial = CHOIXDIAL_DETAIL_EC;
        return null;
    }
    
    // On vient de choisir l'EC dont on veut gerer le commentaire...
    public WOComponent choixEcCommentAGerer() {
    	// a ce moment la, on sait qui est choisi...
    	changerEtatBoutons();
        return null;
    }

// Selon le commentaire en cours, changer l'état des boutons...
    private void changerEtatBoutons() {
    	if (ecEnModif != null) {
    		String comment = monCtComment.getComment(ecEnModif,false);
    		if (comment != null) {
    			autBtModifier = true;
    			autBtSupprimer = true;
    			autBtAssocier = true;
    			autBtNouveau = true;
    		}
    		else {
    			autBtModifier = false;
    			autBtSupprimer = false;
    			autBtAssocier = true;
    			autBtNouveau = true;
    		}
    	}

    }
    
    
    // Lancer la modif du commentaire...
    public WOComponent lancerModifComment() {
    	etatDialComment = dsSaisieComment;
    	dialogueActuel = DIAL_MODIF;
    	return null;
    }
    
    
    // supprimer un commentaire...
    public WOComponent actionSupprComment() {
    	etatDialComment = dsSupprComment;
    	dialogueActuel = DIAL_MODIF;
    	return null;
    }

    public WOComponent tempAction()
    {
        return null;
    }

    // On a cliqué sur le bouton "Annuler" modif...
    public WOComponent annulerModifComment()
    {
    	etatDialComment = dsAffSimpleComment;
    	dialogueActuel = DIAL_AUCUN;
        return null;
    }

    // On vient de cliquer sur "valider" la modif...
    public WOComponent validerAction()
    {
    	// L'action à entreprendre dépend du type de dialogue engagé...
    	switch(etatDialComment) {
    		case dsSaisieComment : monCtComment.changerComment(texteComment, ecEnModif); 
    		break;	
    		case dsSupprComment : monCtComment.supprComment(ecEnModif);
    		break;
    		case dsNouvComment : monCtComment.nouveauComment(texteComment, ecEnModif);
    		break;
    		case dsChoixDansListeComment : monCtComment.nouvChoixComment(commentChoisi, ecEnModif);
    		break;
    	}
    	etatDialComment = dsAffSimpleComment;
    	dialogueActuel = DIAL_AUCUN;
    	
    	changerEtatBoutons();
        return null;
    }

    // Ajout d'un nouveau commentaire...
    public WOComponent nouveauCommentAction()
    {
    	etatDialComment = dsNouvComment;
    	dialogueActuel = DIAL_MODIF;
    	// Si l'EC possède déjà un commentaire, démarrer une action "créer Comme"
        return null;
    }

    // Choix dans une liste de commentaires existants...
    public WOComponent choixCommentAction()
    {
    	etatDialComment = dsChoixDansListeComment;
    	dialogueActuel = DIAL_MODIF;
    	listeComment = monCtComment.chargerComment();
        return null;
    }
    
    
    // On vient de clicker sur un lien dans le détail des commentaires d'EC
    // Passer en mode "gestion de commentaire" et sélecctionner l'ec correpondante dans le WOBrowser
    public WOComponent gestionCommentAction()
    {
    	ecEnModif = ecEnCours;
    	choixDial = CHOIXDIAL_GESTION_COMMENT;
    	changerEtatBoutons();
        return null;
    }
    
    public boolean debugEnCours()
    {
        return ((Session)session()).monApp.debug();
    }
}