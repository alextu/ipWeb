package org.cocktail.ipweb.serveur.components.pagebo.modules;
// Generated by the WOLips Templateengine Plug-in at 10 mars 2008 10:50:09


import org.cocktail.ipweb.serveur.Session;
import org.cocktail.ipweb.serveur.controlleur.RNDiplCtrlr;
import org.cocktail.ipweb.serveur.metier.IpBilanrnOk;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSNotification;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSSelector;

public class Mod_autoRnDipl extends WOComponent {

    public NSArray listeDiplSemImpair, listeDiplSemPair;		// Liste des semestres (impairs ou pairs) du diplome choisi
    public EOGenericRecord leDiplSemCourantImpair,leDiplSemCourantPair;	// var de parcours...
    
    private String msgErreur;
    
    public Integer fspnKey;
    public Integer msemKey, msemKeyPc, mueKey;

    public EOGenericRecord eoDiplSelected;
    public RNDiplCtrlr monAutornDiplCtrlr;

    public String nomFormChoixAutoRnI = "choixAutoRnI";
    public String nomFormChoixAutoRnP = "choixAutoRnP";

    private boolean autorisationGestionSortieRN;
    public boolean doitRefetcher;

    // ----------- CONSTRUCTEUR ------------
    public Mod_autoRnDipl(WOContext context) {
    	super(context);
    	
        autorisationGestionSortieRN = ((Session)session()).monApp.autorisationSortirRN();

    	if (autorisationGestionSortieRN) monAutornDiplCtrlr = new RNDiplCtrlr((Session)session());
//  	System.out.println("ZZZZZZZZZZZZZZZZZZZZZZZZZ  init mod datesIpDipl");

    	// s'enregistrer pour les notifs (chgt d'année en cours)
    	NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
    			new NSSelector("chgtAnnee",							// via cette méthode
    					new Class [] {NSNotification.class}),				// argument obligatoire !!!
    					"chgtAnneeEnCours",									// la signature de la notif qui me plait
    					(Session)this.session());					// instance de celui qui la poste !

    	// chgt dans la liste des dipl. autorisant les RN : 
    	NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
    			new NSSelector("chgtListeDiplAutoRN",							// via cette méthode
    					new Class [] {NSNotification.class}),				// argument obligatoire !!!
    					"chgtDiplAutoRN",									// la signature de la notif qui me plait
    					(Session)this.session());					// instance de celui qui la poste !
    	
    }

    
    //  -----------------------------------------------------    
    //  ------------- Reponse aux notifications -------------
    //  -----------------------------------------------------    
    
    /// Un changement d'année vient d'avoir lieu...
    public void chgtAnnee(NSNotification laNotif) {
    	fspnKey = null;
    }
    
    /// Un changement dans la liste des dipl. autorisant les RN vient d'avoir lieu...
    public void chgtListeDiplAutoRN(NSNotification laNotif) {
    	fspnKey = null;
    	doitRefetcher = true;
    }
    
    //  --------------------------------------------------------    
    //  ---------------- Expr. conditionnelles -----------------
    //  --------------------------------------------------------    

    // Pour n'afficher le détail que quand un diplôme est choisi ...
    public boolean isDiplChoisi() {
    	return (fspnKey != null);
    	//	return monDatesDiplCtrlr.getPopUpDACTDiplome().isItemChoisi();
    }   
    
    // y a t'il un msg d'erreur à afficher ?
    public boolean erreurEnCours() {
        return (msgErreur != null);
    }
    
    // Indiquer si un dialogue de modif est en cours...
    public boolean dialogueModifEnCours() {
    	return false;
    }
    
    public boolean gestionSortieRNAutorisee()
    {
        return autorisationGestionSortieRN;
    }

    //  --------------------------------------------------------    
    //  ---------------- Valeurs à afficher  -------------------
    //  --------------------------------------------------------    

    // Demander à voir le diplome choisi, si un diplome est bien choisi :
    public String getDiplomeChoisi() {
    	if (eoDiplSelected != null)
    		return (String)eoDiplSelected.valueForKey("diplome");
    	else return null;
    }
    
    public String getMsgErreur() {
        return msgErreur;
    }
    
    // *****************************************************************************
    /// Attribuer à chaque groupe de bouton un nom de groupe unique pour la ligne...
    public String getNomGroupeRBI()
    {
    	int mrsemKey = ((Session)session()).monApp.recuperer1int(leDiplSemCourantImpair, "mrsemKey");
        return ""+mrsemKey;
    }
    
    public String getNomGroupeRBP()
    {
    	int mrsemKey = ((Session)session()).monApp.recuperer1int(leDiplSemCourantPair, "mrsemKey");
        return ""+mrsemKey;
    }

    // *****************************************************************************
    // type de police pour label "NON" 
    public String getGciFnon()
    {
    	return styleSelonChoix(true, 0);
    }
    
    // type de police pour label "session 1" 
    public String getGciFsess1()
    {
    	return styleSelonChoix(true, 1);
    }

    // type de police pour label "session 2" 
    public String getGciFsess2()
    {
    	return styleSelonChoix(true, 2);
    }

    // -----
    
    // type de police pour label "NON" 
    public String getGcpFnon()
    {
    	return styleSelonChoix(false, 0);
    }
    
    // type de police pour label "session 1" 
    public String getGcpFsess1()
    {
    	return styleSelonChoix(false, 1);
    }

    // type de police pour label "session 2" 
    public String getGcpFsess2()
    {
    	return styleSelonChoix(false, 2);
    }

    // décide selon le type de semestre et le n° du choix le style de fonte à afficher...
    private String styleSelonChoix(boolean semImpair, int noChoix) {
    	EOGenericRecord leDiplSemCourant;
    	if (semImpair) 
    		leDiplSemCourant = leDiplSemCourantImpair;
    	else 
    		leDiplSemCourant = leDiplSemCourantPair;

    	boolean choixImpossible = desactiveBRSess(semImpair,noChoix);
    	String res = "";

    	if (choixImpossible) {
    		if (getEtatChoixAutorn(semImpair) == noChoix) res = "ChoixPrisNonModif";
    		else res= "ChoixImpossible";
    	}
    	else {
    		if (getEtatChoixAutorn(semImpair) == noChoix) res= "ChoixPris"; 
    		else res= "normal";
    	}

    	return res;
    }

    
    //*******************************************************
    // Est-ce que le radio bouton "NON" est disabled ???
    public boolean getGciDnon()
    {
    	return desactiveBRSess(true,0);
    }

    // Est-ce que le radio bouton "session1" est disabled ???
    public boolean getGciDsess1()
    {
    	return desactiveBRSess(true,1);
    }

    // Est-ce que le radio bouton "session2" est disabled ???
    public boolean getGciDsess2()
    {
    	return desactiveBRSess(true,2);
    }

    // --------------
    
    public boolean getGcpDnon()
    {
    	return desactiveBRSess(false,0);
    }

    // Est-ce que le radio bouton "session1" est disabled ???
    public boolean getGcpDsess1()
    {
    	return desactiveBRSess(false,1);
    }

    // Est-ce que le radio bouton "session2" est disabled ???
    public boolean getGcpDsess2()
    {
    	return desactiveBRSess(false,2);
    }    
    
    // Vérifier si le bouton radio doit être disabled ou non...
    private boolean desactiveBRSess(boolean semImpair, int noChoix) {
    	EOGenericRecord leDiplSemCourant;
    	if (semImpair) 
    		leDiplSemCourant = leDiplSemCourantImpair;
    	else 
    		leDiplSemCourant = leDiplSemCourantPair;
   	
    	// est-ce qu'on a les droits en modifs sur ce diplome et ce semestre ?
    	int noSemestre = ((Session)session()).monApp.recuperer1int(leDiplSemCourant, "msemOrdre");
    	if (monAutornDiplCtrlr.isModifAutorisee(noSemestre)) {
        	int bcalEtat = ((Session)session()).monApp.recuperer1int(leDiplSemCourant, "bcalEtat");
        	if ((noChoix>0 && bcalEtat==2) || (noChoix==0 && bcalEtat>0)) return true;
        	else return false;    		
    	}
    	else return true;
    }
    
    
    
    //***********************************************************************************************************
    // retourner la couleur de fond des lignes du tableau des semestres impairs (alternance de gris et blanc)
    public String getBGColorSemImpairs()
    {
    	// semOrdre de la ligne en cours : 
    	int semOrdre = ((Session)session()).monApp.recuperer1int(leDiplSemCourantImpair, "msemOrdre");
    	if (semOrdre == 3)
    		return "#b2e1ff";
    	else return "#D2E9FF";
    }

    // retourner la couleur de fond des lignes du tableau des semestres impairs (alternance de gris et blanc)
    public String getBGColorSemPairs()
    {
    	// semOrdre de la ligne en cours : 
    	int semOrdre = ((Session)session()).monApp.recuperer1int(leDiplSemCourantPair, "msemOrdre");
    	if (semOrdre == 4)
    		return "#b2e1ff";
    	else return "#D2E9FF";
    }

    
    // *****************************************************************
    // retourne le submit du bon formulaire...
    public String getFctSubmitChoixAutoRnI()
    {
        return "document."+nomFormChoixAutoRnI+".submit();";    
    }
    
    public String getFctSubmitChoixAutoRnP()
    {
        return "document."+nomFormChoixAutoRnP+".submit();";    
    }

    //  --------------------------------------------------------    
    //  ---------------- Valeurs en E/S      -------------------
    //  --------------------------------------------------------    

    // récupérer la valeur d'une case à cocher...
    public String getSessionSelected()
    {
     	return ""+getEtatChoixAutorn(true);
    }
    
    // modifier la valeur d'une case à cocher ...
    public void setSessionSelected(Integer newSessionSelected)
    {
    	setEtatRnAff(true,newSessionSelected);
    }

    // -------------

    public String getSessionSelectedP()
    {
     	return ""+getEtatChoixAutorn(false);
    }
    
    public void setSessionSelectedP(Integer newSessionSelected)
    {
    	setEtatRnAff(false,newSessionSelected);
    }
    
    // renvoyer la valeur de l'état d'autorisation d'affichage du RN, s'il est fixé... 
    private int getEtatChoixAutorn(boolean semImpair) {
    	EOGenericRecord leDiplSemCourant;
    	if (semImpair) leDiplSemCourant = leDiplSemCourantImpair;
    	else leDiplSemCourant = leDiplSemCourantPair;
    	
       	int bcalEtat = ((Session)session()).monApp.recuperer1int(leDiplSemCourant, "bcalEtat");
    	int rnAffEtat;
    	
    	// y a t'il un lien vers un enreg. renseignant l'autorisation ?
    	Integer etatAutoRN = (Integer)leDiplSemCourant.valueForKey("rnaffEtat");
    	if (etatAutoRN == null) rnAffEtat = -1;
    	else rnAffEtat = etatAutoRN.intValue();
    	
    	return (bcalEtat>rnAffEtat?bcalEtat:rnAffEtat);   	
    }
    
    // changer la valeur dans la base de l'occurence concernée de l'entite IP_BILANRN_OK
    // SSI la valeur a été changé par l'utilisateur !!!
    private void setEtatRnAff(boolean semImpair, Integer nouvValSessionAutorn) {

    	EOGenericRecord leDiplSemCourant;
    	if (semImpair) leDiplSemCourant = leDiplSemCourantImpair;
    	else leDiplSemCourant = leDiplSemCourantPair;

    	int ancValSessionAutorn = getEtatChoixAutorn(semImpair);
    	if (ancValSessionAutorn != nouvValSessionAutorn.intValue()) { // alors on a changé qq chose

    		String diplome = ((Session)session()).monApp.recuperer1String(leDiplSemCourant, "diplome");
    		String mparLibelle = ((Session)session()).monApp.recuperer1String(leDiplSemCourant, "mparLibelle");
    		int msemOrdre = ((Session)session()).monApp.recuperer1int(leDiplSemCourant, "msemOrdre");
    		NSLog.out.appendln("On change l'état pour "+diplome+", "+mparLibelle+" sem."+msemOrdre+" : passage à "+nouvValSessionAutorn);

//  		MAJ des relationsChips... pour suivre l’ajout des objets
//  		catSelected.addObjectToBothSidesOfRelationshipWithKey(itemEdit,"items");

    		// est-ce que l'on a déjà un EO pour l'entite IP_BILANRN_OK qui serait associée à ce "leDiplSemCourantImpair" ?
    		Integer mrsemKey = (Integer)leDiplSemCourant.valueForKey("mrsemKey");
    		Integer fannKey = new Integer(((Session)session()).getAnneeEnCours());
    		EOEditingContext ec = ((Session)session()).defaultEditingContext();

    		Integer etatAutoRN = (Integer)leDiplSemCourant.valueForKey("rnaffEtat");
    		if (etatAutoRN == null)
    		{	// non : créer le nouvel EO et l'insérer...
    			IpBilanrnOk etatAutorn = new IpBilanrnOk();
    			etatAutorn.setFannKey(fannKey);
    			etatAutorn.setMrsemKey(mrsemKey);
    			etatAutorn.setRnaffEtat(nouvValSessionAutorn);
    			ec.insertObject(etatAutorn);

    		}
    		else 
    		{
    			// oui : modifier le EO... en commençant par le fetcher...
    			NSArray bindings = new NSArray(new Object[] {fannKey, mrsemKey});
    			EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(
    					"fannKey = %@ and mrsemKey = %@", bindings);

    			EOFetchSpecification fetchSpec = new EOFetchSpecification("IpBilanrnOk",qualifier, null);
    			fetchSpec.setRefreshesRefetchedObjects(true);

    			NSArray res = ec.objectsWithFetchSpecification(fetchSpec);  
    			if (res != null && res.count()>0) {
    				IpBilanrnOk etatAutorn = (IpBilanrnOk)res.objectAtIndex(0);
    				etatAutorn.setRnaffEtat(nouvValSessionAutorn);
    			}
    		}


    		// sauver le tout...
    		ec.saveChanges();

    		// TODO : marche pas ci-dessous... faire un reload !
    		// leDiplSemCourant.takeStoredValueForKey(new Integer(sessionAutorn), "rnaffEtat");
    		monAutornDiplCtrlr.reloaderVueAutoRN(mrsemKey);

    	}
    }


    //  --------------------------------------------------------    
    //  ------------------------- ACTIONS ----------------------
    //  --------------------------------------------------------    
    
    // On veut sélectionner un diplome... fetcher les détails à afficher
    public WOComponent voirAutornDiplome() {

    	// NSLog.err.appendln("********************>>>>>>>>>>  On genre l'action voirDatesDiplome() !!!!!");

    	loaderVueAutoRN();
    	return null;
    }

    private void loaderVueAutoRN() {

    	if (fspnKey != null)
    		monAutornDiplCtrlr.chargerAutornDipl(fspnKey);
    	listeDiplSemImpair = monAutornDiplCtrlr.getListeDiplSemParite(true);
    	listeDiplSemPair = monAutornDiplCtrlr.getListeDiplSemParite(false);
    }
    
}