package org.cocktail.ipweb.serveur;
//Generated by the WOLips TemplateEngine Plug-in at 28 sept. 2006 12:21:15


import java.util.Enumeration;
import java.util.HashMap;

import org.cocktail.fwkcktlwebapp.server.CktlMailBus;
import org.cocktail.fwkcktlwebapp.server.CktlWebSession;
import org.cocktail.fwkcktlwebapp.server.database.CktlDataBus;
import org.cocktail.ipweb.serveur.components.onglets.MenuCtrlr;
import org.cocktail.ipweb.serveur.components.onglets.OngletsCtrlr;
import org.cocktail.ipweb.serveur.controlleur.CompteCtrlr;
import org.cocktail.ipweb.serveur.controlleur.ImprJasper;
import org.cocktail.ipweb.serveur.controlleur.IndividuCtrlr;
import org.cocktail.ipweb.serveur.controlleur.InscFormationCtrlr;
import org.cocktail.ipweb.serveur.controlleur.InscSemestreCtrlr;
import org.cocktail.ipweb.serveur.controlleur.PhotoCtrlr;
import org.cocktail.ipweb.serveur.controlleur.ReleveNotes;
import org.cocktail.ipweb.serveur.metier.EOCompte;
import org.cocktail.ipweb.serveur.metier.IpChoixEc;
import org.cocktail.ipweb.serveur.metier.IpChoixLog;
import org.cocktail.ipweb.serveur.metier.IpParchoixLog;

import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSTimestamp;

public class Session extends CktlWebSession {

	private CompteCtrlr monCC;
	private PhotoCtrlr lePhotoCtrlr;
	private IndividuCtrlr monIC,etudiantIC, etudiantSemADetailler;
	private InscSemestreCtrlr semCtEnCours;		// repérer le ctrlr de semestre en cours d'utilisation...
	private OngletsCtrlr mesOnglets;
	private MenuCtrlr monMenuCtrlr;
	private ReleveNotes monRNCtrlr;

	private int anneeEnCours;

	private NSDictionary inscSemParDefaut, etudiantADetailler;
	private Integer idiplNumero;
	private Integer imrecSemestre;
	private Integer msemKeyADetailler;
	private Integer anneeUniv;

	private boolean modeBackOffice;		// si vrai on est en mode Back-Office
	private boolean changementChoix;	// VRAI si au moins 1 chgt dans les choix d'EC

	public Application monApp;	
	private EOEditingContext monEc;
	private CktlDataBus dataBus;
	private ImprJasper monImprimanteJasper;

	private boolean dialogueModal;

	public Session() {
		super();
		monEc = this.defaultEditingContext();
		dataBus = new CktlDataBus(monEc);

		monApp = (Application)Application.application();
		monImprimanteJasper = monApp.getMonImprimanteJasper();
		dialogueModal = false;

		anneeEnCours = ((Application)Application.application()).getAnneeUnivEnCours();
		anneeUniv = new Integer(getAnneeEnCours());

		monMenuCtrlr = new MenuCtrlr();

		monRNCtrlr = new ReleveNotes(this);

		etudiantADetailler = null;

		// affichage des Properties..
//		Properties prop = System.getProperties();
//		Enumeration enum = prop.propertyNames();
//		while (enum.hasMoreElements()) {
//		String ne = (String)enum.nextElement();
//		System.out.println(ne+" = "+prop.getProperty(ne));
//		}

	}
	
	// Retourne une String contenant la concaténation de toutes les adresses mail des redoublants d'une promo...
	public String emailsRdbltPromo(Integer fannKey,Integer fspnKey,Integer msemOrdre) {

		NSArray bindings = new NSArray(new Object[] {fannKey,fspnKey,msemOrdre});    

		String qualifSelection = "fannKey = %@ and fspnKey = %@ and msemOrdre = %@ and idiplRedoublant = 'O'";
		EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(qualifSelection, bindings);  
		EOFetchSpecification fs = new EOFetchSpecification("ScolInsParcoursSemestre",qualifier,null);
		fs.setRefreshesRefetchedObjects(true);

		NSArray tmp = defaultEditingContext().objectsWithFetchSpecification(fs);
		if (tmp == null || tmp.count()==0) return null;
		
		Enumeration e = tmp.objectEnumerator();
		boolean debut = true;
		String res = null;
		while (e.hasMoreElements()) {
			EOGenericRecord eoEt = (EOGenericRecord)e.nextElement();
			Integer dispense = (Integer)eoEt.valueForKey("imrsemDispense");
			if (dispense == null || (dispense.intValue() != 4 && dispense.intValue() != 99)) {	// on n'a pas affaire à un redoublant dispensé du diplôme...
				if (!debut) res += ",";
				else {
					debut = false;
					res = "";
				}
				res += (String)eoEt.valueForKey("emailEtudiant");
			}
		}    
		return res;
		
	}
	
	// Envoit d'un mail à la liste des redoublants...
	public void prevenirParMailGroupRdbl(Integer fannKey,Integer fspnKey,Integer msemOrdre,String diplSem) {
		// liste des destinataires :
		String listeDestinataires = emailsRdbltPromo(fannKey,fspnKey,msemOrdre);
		if (listeDestinataires != null) {
			String urlAppli = monApp.getConfig("APP_ULR");
			// non vide : il y a des redoublants à prévenir...
			String leMsg="Bonjour,\n\nLe service de la scolarité vient de terminer le transferts des notes et des ECTS pour un diplôme auquel vous vous êtes réinscrit : "+diplSem;
			leMsg += "\nVous pouvez dés à présent vous connecter sur l'application IP Web pour effectuer les choix pédagogiques qu'il vous reste éventuellement à faire.";
			leMsg += "\n\nLien vers IP Web : "+urlAppli+"\n\n(Si vous avez déjà validé toutes les EC à choix pour ce semestre, merci de ne pas tenir compte de ce message)";
			
			envoitMailGroupe("IP par le Web ouverte en "+diplSem, listeDestinataires, leMsg );	
		}
	}
	
	

	// retourner le mail complet 
	public String emailComplet() { 

		String email = email();
		String dom = cptDomaine();

		if (email == null) return "pas de compte actif dispo !";
		else if (dom == null) return email;
		else return email + "@" + dom;
	}

	// retourner le mail sans le nom de domaine 
	public String email() { 
		if (monCC != null && monCC.compteCourant() != null && monCC.compteCourant().compte() != null) {
			EOCompte leCpt = monCC.compteCourant().compte();
			return leCpt.cptEmail();
		}
		else return etudiantIC.emailEtudiant();

	}

	public String cptDomaine() { 
		if (monCC != null && monCC.compteCourant() != null && monCC.compteCourant().compte() != null) {
			EOCompte leCpt = monCC.compteCourant().compte();
			return leCpt.cptDomaine();
		}
		else return null;

	}

	// URL vers fichier pdf d'explication pour les �tudiants....
	public String urlNoticeAppli()
	{
		return monApp.urlImage("images/IP_WEB_doc_etudiant.pdf",this.context());
	}



	public void setModeBackOffice() {
		modeBackOffice = true;
	}

	public boolean modeBackOffice() {
		return modeBackOffice;
	}


	public MenuCtrlr getMenuCtrlr() {
		return monMenuCtrlr;
	}

	public OngletsCtrlr getMesOnglets() {
		return mesOnglets;
	}

	public void setMesOnglets(OngletsCtrlr onglets) {
		mesOnglets = onglets;
	}

	public int getAnneeEnCours() { return anneeEnCours; }

	// Un changement de l'année en cours vient de se produire... l'enregistrer et diffuser une notification !
	public void setAnneeEnCours(int nouvAnneeUniv) {
		if (nouvAnneeUniv != anneeEnCours) {
			anneeEnCours = nouvAnneeUniv;
			// puis Envoyer une notification de chgt d'année en cours pour tous les observateurs :
			NSNotificationCenter.defaultCenter().postNotification(
					"chgtAnneeEnCours",		// Voila ce que je veux dire !!!!
					this,	         		// C'est kiki poste ! C'est moi ki poste!
					null );					// avec un dico vide...
		}
	}


	public void dderDetailIPEtudiant(NSDictionary param) {
		// garder trace de l'appel...
		etudiantADetailler = param;

		NSNotificationCenter.defaultCenter().postNotification(
				"chgtEtudiantADetailler",		// Voila ce que je veux dire !!!!
				this,	         				// C'est kiki poste ! C'est moi ki poste!
				etudiantADetailler );			// avec ce dico...
	}

	// Rejouer la notif si besoin
	public void isEtudiantEnAttente() {
		if (etudiantADetailler != null) {
			dderDetailIPEtudiant(etudiantADetailler);
			etudiantADetailler = null;
		}
	}

	// Rejouer la notif si besoin (appel depuis classe Formations
	public boolean isChgtEtudiantEnAttente() {
		if (etudiantSemADetailler != null) {
			signaleChgtEtud(etudiantSemADetailler,msemKeyADetailler );
			etudiantSemADetailler = null;
			msemKeyADetailler = null;
			return true;
		}
		return false;
	}
	

	public void setCtrlrCompte(CompteCtrlr cc) {
		monCC = cc;
	}

	public CompteCtrlr getCtrlrCompte() {
		return monCC;
	}

	public PhotoCtrlr getPhotoCtrlr() {
		return lePhotoCtrlr;
	}
	public void setPhotoCtrlr(PhotoCtrlr lePhotoCtrlr) {
		this.lePhotoCtrlr = lePhotoCtrlr;
	}

	public void setIndividuCtrlr(IndividuCtrlr lindC) {
		monIC = lindC;
	}

	public void setICEtudiant(IndividuCtrlr lindC) {
		etudiantIC = lindC;
	}

	// Enregistrer la connexion d'un étudiant...
	public void logConnexion() {
		int noEtud = etudiantIC.monCInsc().numeroEtudiant();
		IpParchoixLog cnxLog = new IpParchoixLog();
		monEc.insertObject(cnxLog);

//		IpParchoixLog cnxLog = (IpParchoixLog)dataBus.newObjectInEntity("IpParchoixLog",monEc);
		cnxLog.setEtudNumero(new Integer(noEtud));
		cnxLog.setPclDateLog(new NSTimestamp());
		cnxLog.setFannKey(new Integer(getAnneeEnCours()));
		cnxLog.setTypeAction("CX");
		commitChgt();
	}
	
	// Si un étudiant vient de dder son RN, logguer cette action pour les stats...
	public void logSortieRN(Integer idiplNumero,Integer rnEtudNumero,Integer rnFannKey,Integer rnMrsemKey,Integer rnMsemOrdre) {
		if (!modeBackOffice) {
			// on ne loggue pas les sorties de RN par le personnel !
			logguerActionParChoix(idiplNumero,rnEtudNumero,rnFannKey,rnMrsemKey,rnMsemOrdre,"RN");
		}
	}
	
	// Si un étudiant vient de confirmer ou infirmer ses choix pédagogiques de semestre, logguer cette action pour les stats...	
	public void confirmerChoixEtudiant(Integer idiplNumero,Integer etudNumero,Integer fannKey,Integer mrsemKey,Integer msemOrdre,boolean confirmer) {
		// on ne loggue pas les sorties de RN par le personnel !
		String action;
		if (confirmer) action = "VC";
		else action = "AV";
		
		logguerActionParChoix(idiplNumero,etudNumero,fannKey,mrsemKey,msemOrdre,action);
	}
	
	// Si on vient de créer une inscription à un parcours commun pour un étudiant, logguer cette action pour les stats...	
	public void creationParcoursCommunEtudiant(Integer idiplNumero,Integer etudNumero,Integer fannKey,Integer mrsemKey,Integer msemOrdre) {
		// on ne loggue pas les sorties de RN par le personnel !
		logguerActionParChoix(idiplNumero,etudNumero,fannKey,mrsemKey,msemOrdre,"CP");
	}

	private void logguerActionParChoix(Integer idiplNumero,Integer etudNumero,Integer fannKey,Integer mrsemKey,Integer msemOrdre,String action) {
		IpParchoixLog cnxLog = new IpParchoixLog();
		monEc.insertObject(cnxLog);

		cnxLog.setIdiplNumero(idiplNumero);
		cnxLog.setEtudNumero(etudNumero);
		cnxLog.setPclDateLog(new NSTimestamp());
		cnxLog.setFannKey(fannKey);
		cnxLog.setMrsemKey(mrsemKey);
		cnxLog.setMsemOrdre(msemOrdre);
		cnxLog.setTypeAction(action);
		commitChgt();		
		
	}
	
	
	public IndividuCtrlr getIndividuCtrlr() {
		return monIC;
	}

	public IndividuCtrlr getICEtudiant() {
		return etudiantIC;
	}
	
	// Faire en sorte dans tous les cas de répondre 
	// (rem : quand un étudiant se logge, monIC = null..
	public boolean estUnEnseignant() {
		if (monIC != null && monIC.estUnEnseignant())
			return true;
		else return false;
	}

	public ReleveNotes getReleveNotes() {
		return monRNCtrlr;
	}

	public void signaleChgtEtud(IndividuCtrlr nouvEtud, Integer msemKey) {
		etudiantIC = nouvEtud;
		
		etudiantSemADetailler = nouvEtud;
		msemKeyADetailler = msemKey;
		
		NSDictionary dico = null;
		if (msemKey != null)
			dico = new NSDictionary(msemKey,"msemKey");
		
//		Envoyer une notification à tous les observateurs :
		NSNotificationCenter.defaultCenter().postNotification(
				"chgtEtudiant",		// Voila ce que je veux dire !!!!
				this,				// C'est kiki poste ! C'est moi ki poste!
				dico);				// avec le dico !
	}

	public void signaleChgtListeDiplAutorn() {
//		Envoyer une notification a tous les observateurs :
		NSNotificationCenter.defaultCenter().postNotification(
				"chgtDiplAutoRN",	// Voila ce que je veux dire !!!!
				this,				// C'est kiki poste ! C'est moi ki poste!
				null);				// avec le dico !
	}


	// demande au niveau application de renvoyer un tableau de 2 dates (d�but et fin d'ins� aux IP Web) 
	// en fonction du FSPN_KEY et du semestre...
	// si cette association diplome/semestre n'existe pas, alors retourne null !
	public NSTimestamp[] chercherDatesDiplSem(Integer fspnKey,Integer sem) {
		return ((Application)cktlApp).chercherDatesDiplSem(fspnKey,sem,new Integer(getAnneeEnCours()) );
	}
	
	// Vérifer si autorisation des IP des redoublants au niveau de ce dipl/sem.
	public boolean autoriseIpRedoublant(Integer fspnKey,Integer sem) {
		return ((Application)cktlApp).autoriseRedoublants(fspnKey,sem,new Integer(getAnneeEnCours()) );
	}
	

	// renvoyer TRUE si l'on est dans les dates d'IP pour un (fspnKey,msemOrdre)  
	public boolean verifDatesDiplSem(Integer fspnKey, Integer msemOrdre){

		// la modif des choix d'IP est possible ssi :
		//	- les dates ne sont pas pass�es 
		//		(!!! ATTENTION !!! date de fin forc�e � 23h59 pour inclure toute la journ�e !!!)
		//	- le semestre en question n'a pas �t� obtenu (redoublant)

		boolean modifPossible = false;
		boolean semIpWeb = false;

		// vérifier si ce semestre a déjà été intégré...
		boolean semestreIntegre = monApp.semestreIntegre(fspnKey, msemOrdre, new Integer(getAnneeEnCours()));

		// vérifier que ce semestre figure dans ceux qui sont editable via IP Web...
		if (monApp.semestreEditable(fspnKey,msemOrdre, new Integer(getAnneeEnCours()))) {

			NSTimestamp[] dates = chercherDatesDiplSem(fspnKey,msemOrdre);

			if (dates!=null && dates.length>=2 && dates[0] != null && dates[1] != null) {
				semIpWeb = true;

				NSTimestamp now = new NSTimestamp();
				if (now.after(dates[0]) && now.before(dates[1])) {
					modifPossible = true;
					// quel est le degr� d'urgence ? 3 jours avant indiquer par un msg que �a urge !
				}
			}
		}
		return (semIpWeb && modifPossible && !semestreIntegre);
	}


	// notifier du changement de semestre demand� !
	// ATTENTION : Il faut que le WoComp se soit enregistr� avant (marche pas pour l'init !!!)
	public void changeSemestre(NSDictionary userInfo) {
//		ATTENTION ! Mettre � jour les donn�es de la session (idiplNumero...etc)
		// TODO : � changer, pas propre (la session ne devrait avoir qu'un seul pointeur : le semestre en cours d'�dition)
		initSemestreParDefaut(userInfo);

//		Envoyer une notification � tous les observateurs :
		NSNotificationCenter.defaultCenter().postNotification(
				"chgtSemestre",		// Voil� ce que je veux dire !!!!
				this,					// C�est kiki poste ! C�est moi ki poste!
				userInfo);				// avec le dico !
	}

	public InscSemestreCtrlr getCtlrSemestreEnCours() {
		return semCtEnCours; 
	}

	public Integer msemEnCours() { 
		if (semCtEnCours != null) return semCtEnCours.getMsemKey();
		else return null;
	}

	public void setCtlrSemestreEnCours(InscSemestreCtrlr nouvSemCt) { semCtEnCours = nouvSemCt; }

	public String srcCssFile() {
		return ((Application)cktlApp).urlImage("local_css/ipWeb.css",this.context());
	}
	
	public String srcImgCadreBordD()
	{
		return monApp.urlImage("images/cadreSeul_CoteD.gif",this.context());
	}

	public String srcImgCadreBordG()
	{
		return monApp.urlImage("images/cadreSeul_coteG.gif",this.context());
	}

	public String srcImgCadreBas()
	{
		return monApp.urlImage("images/cadreSeul_Bas.gif",this.context());
	}

	public String imgFinOnglets() {
		return monApp.urlImage("images/cadreSeul_haut.gif",this.context()); 
	}


	// TODO : � revoir !!
	public void initSemestreParDefaut(NSDictionary userInfo) {
		inscSemParDefaut = userInfo;
		InscFormationCtrlr formCt = (InscFormationCtrlr)userInfo.objectForKey("InscFormCtrlr");
		idiplNumero = formCt.idiplNumero();
//		EOGenericRecord sem = (EOGenericRecord)userInfo.objectForKey("EOSem");
//		int msemOrdre = ((Integer)sem.valueForKey("msemOrdre")).intValue();
		int msemOrdre = formCt.getMsemOrdre().intValue(); 
		if (msemOrdre%2== 1) {
			imrecSemestre = new Integer(1);
		}
		else imrecSemestre = new Integer(0);

	}

	public NSDictionary getInscSemestreParDefaut() {
		return inscSemParDefaut;
	}

	// formatage d'un nombre Double : sans virgule si pas de partie d�cimale, vide si = 0.00
	public String formatteDouble(Double arg) {
		int valEnt = arg.intValue();
		if (arg.doubleValue() != valEnt) return arg.toString();
		else {
			if (valEnt==0) return "";
			else return (new Integer(valEnt)).toString();
		}
	}

	// formatage d'un nombre double : sans virgule si pas de partie d�cimale, 0 ou vide si 0.00
	public String formattedouble(double arg,boolean masqueZero) {
		int valEnt = (int)arg;
		if (arg != valEnt) return (new Double(arg)).toString();
		else {
			if (valEnt==0 && masqueZero) return "";
			else return (new Integer(valEnt)).toString();
		}
	}

	public double convChpDouble(EOGenericRecord eo,String chp) {
		// TODO : TRY sur le "valueForKey" !
		Double res = ((Double)eo.valueForKey(chp));
		if (res==null) return 0.0;
		else return res.doubleValue();
	}

//	public void demanderModif() {
//	semCtEnCours.demanderModif();
//	}

//	public void validerModif() {
//	semCtEnCours.validerModif();
//	}

	public boolean modifEnCours() { 
		return (semCtEnCours!=null && semCtEnCours.modeModif()); }

	public IpChoixEc ajouteChoixEc(Integer mrecKey,Integer msemKey,Integer mrueKey) {
		// cr�ation d'un nouvel enreg. de choix d'EC
//		IpChoixEc choixEc = new IpChoixEc();
//		monEc.insertObject(choixEc);

		IpChoixEc choixEc = (IpChoixEc)dataBus.newObjectInEntity("IpChoixEc",monEc);

		choixEc.setIdiplNumero(idiplNumero);
		choixEc.setMsemKey(msemKey);
		choixEc.setImrecSemestre(imrecSemestre);
		choixEc.setMrueKey(mrueKey);
		choixEc.setMrecKey(mrecKey);
		choixEc.setCeDateChoix(new NSTimestamp());
		choixEc.setFannKey(anneeUniv);
		choixEc.setChoixIntegre("N");
		// cr�ation d'un nouvel enregistrement de log...
		ajouteLogChoix(mrecKey,msemKey,"A");

		return choixEc;
	}

	public void supprimeChoixEc(IpChoixEc choixEc,Integer mrecKey,Integer msemKey) {
//		monEc.deleteObject(choixEc);
		NSArray bindings = new NSArray(new Object[] {choixEc.idiplNumero(),
				mrecKey,
				msemKey});
		EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(
				"idiplNumero = %@ and mrecKey = %@ and msemKey = %@", bindings);

		dataBus.deleteFromTable(null,"IpChoixEc",qualifier);

		// cr�ation d'un nouvel enregistrement de log pour la suppression...
		ajouteLogChoix(mrecKey,msemKey,"S");
	}

	private void ajouteLogChoix(Integer mrecKey,Integer msemKey,String typeLog) {
//		IpChoixLog choixLog = new IpChoixLog();
//		monEc.insertObject(choixLog);

		IpChoixLog choixLog = (IpChoixLog)dataBus.newObjectInEntity("IpChoixLog",monEc);
		choixLog.setIdiplNumero(idiplNumero);
		choixLog.setMsemKey(msemKey);
		choixLog.setImrecSemestre(imrecSemestre);
		choixLog.setMrecKey(mrecKey);
		choixLog.setClDateLog(new NSTimestamp());
		choixLog.setEtatChoix(typeLog);
		changementChoix= true;	// il y a au moins 1 choix qui change !
	}

	// appel de la proc�dure stock�e...
	public boolean integrerChoixIpSemestre(Integer fspnKey,Integer semOrdre,Integer fannKey,int etat) {
		NSArray clefs = new NSArray(new Object[] {"10_fspnkey","20_msemordre","30_fannkey","40_etat"});
		NSArray vals = new NSArray(new Object[] {fspnKey,semOrdre,fannKey,new Integer(etat)});
		NSDictionary dico = new NSDictionary(vals,clefs);
//		EOUtilities.executeStoredProcedureNamed(monEc,"pIpwIntegreSem",dico);
//		return true;

		return execProc("pIpwIntegreSem",dico);
	}


	public boolean execProc(String nomPS, NSDictionary dico) {
		return dataBus.executeProcedure(nomPS,dico);
	}


	public boolean envoitMail(String titreMail, String leMsg, String nomFichier, NSData lesDatas) {

		// 1) envoi par mail [si c'est autorisé : appli en exploit° seulement !]
		// --> sinon me renvoyer les mails... 

		CktlMailBus leBusDeMail = monApp.getMailBus();
		boolean bienPasse;

		if (leBusDeMail != null) {
			String emailEtud;
			if (monApp.peutEnvoyerMailsAuxEtudiants()) 
				emailEtud = emailComplet();
			else 
				emailEtud = monApp.getEmailRedirection();

			String expediteur = monApp.getConfig("EXPED_MAILS_ETUDIANT");

			bienPasse = leBusDeMail.sendMail(expediteur, emailEtud, null, titreMail, leMsg, nomFichier, lesDatas);
		}
		else {
			System.err.println("*********** ERREUR : Pas de serveur de mail configuré et disponible...");
			bienPasse = false;
		}

		return bienPasse;
	}

	public boolean envoitMailGroupe(String titreMail, String listeDestinataires, String leMsg ) {
		return envoitMailSansPJ(titreMail, monApp.getConfig("EXPED_MAILS_ETUDIANT"), null, listeDestinataires, leMsg);
	}
	
	public boolean envoitMailListe(String sujetMail, String listeDestinataires, String leMsg ) {
		return envoitMailSansPJ(sujetMail, emailComplet(), emailComplet(), listeDestinataires, leMsg);
	}
	
	private boolean envoitMailSansPJ(String sujetMail, String expediteur, String cc, String listeDestinataires, String leMsg ) {

		// envoi d'un email sans PJ à un groupe de destinataires [si c'est autorisé : appli en exploit° seulement !]
		// --> sinon me renvoyer les mails... 
		CktlMailBus leBusDeMail = monApp.getMailBus();
		boolean bienPasse;

		if (leBusDeMail != null) {
			if (!monApp.peutEnvoyerMailsAuxEtudiants()) { 
				leMsg += "\n\nMessage initiallement prévu pour cette liste de destinaitaires : " + listeDestinataires;
				listeDestinataires =  monApp.getEmailRedirection();
			}
			bienPasse = leBusDeMail.sendMail(expediteur, listeDestinataires, cc , sujetMail, leMsg);
		}
		else {
			System.err.println("*********** ERREUR : Pas de serveur de mail configuré et disponible...");
			bienPasse = false;
		}

		return bienPasse;
	}
	
	// Pouvoir interroger un paramètre de config depuis n'importe où...
	public boolean interrogeParamConfig(String nomParamConfig) {
		return monApp.interrogeParamConfig(nomParamConfig);
	}
	
	public int interrogeParamConfigInt(String nomParamConfig) {
		return monApp.interrogeParamConfigInt(nomParamConfig);
	}
	
	public NSData imprimePDF(String rapportJasper,HashMap parametres) {
		// "choixNonFaits.jasper", new HashMap()
		return monImprimanteJasper.jasperPdf(rapportJasper,parametres);
	}
	
	public NSData imprimeXLS(String rapportJasper,HashMap parametres) {
		return monImprimanteJasper.jasperXLS(rapportJasper,parametres);
	}
	
	public NSData imprimePDFavecDataSource(String rapportJasper,HashMap parametres,Object datasource) {
		// "choixNonFaits.jasper", new HashMap()
		return monImprimanteJasper.jasperPdf(rapportJasper,parametres,datasource);
	}


	public boolean commitChgt() {
		boolean saveOk = false;
		try {
			monEc.saveChanges();
			saveOk = true;
			changementChoix = false;
		} catch (RuntimeException e) {
			e.printStackTrace();
			monEc.invalidateAllObjects();	// force un refetch...
			// id�alement, il faudrait aussi annuler les changements dans les objets controleurs... 
			// A FAIRE !!!
		}
		return saveOk;
	}

	public boolean changementChoix() { return changementChoix; }

	// indique si un dialogue est engag� !
	public boolean dmec() {
		return dialogueModal;	
	}

	// quand on veut d�marrer un dialogue modal : renvoit faux s'il y a d�j� un dialogue modal engag� !
	public boolean demarreDM() {
		if (dialogueModal) return false;
		else {
			dialogueModal = true;
			return true;
		}
	}

	public void arreteDM() {
		dialogueModal = false;
	}

	public boolean debug() {
		return monApp.debug();
	}
}