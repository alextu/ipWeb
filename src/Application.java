//Generated by the WOLips TemplateEngine Plug-in at 28 sept. 2006 12:21:15

import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Properties;

import com.webobjects.appserver.WOApplication;
import com.webobjects.foundation.*;
import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.NSTimestamp;

import java.math.BigDecimal;
import java.sql.*;

import fr.univlr.cri.lrwebappexception.MyApp;
import fr.univlr.cri.webapp.*;
//import er.ajax.*;

public class Application extends MyApp {

	// Constantes utiles pour rep�rer les options de menus dans toute l'appli... 
	//	syst�me de menu pour le personnel scol et enseignants !
	// lien entre constantes pour d�signer les options de menu dans le code et la table DROITS_PROFIL 

	// !!! A synchroniser avec champ IPW_MODULES.IPM_CODE
	public static final String OM_LISTEDIPL="LISTEDIPL"; 		// liste des diplomes avec nbre inscrits, nbre IP d�marr�e, termin�e
	public static final String OM_INSCRITSDIPL="INSCRITSDIPL";		// les inscrits à un diplome avec leur statut
	public static final String OM_PARAMDIPL="PARAMDIPL";		// le param�trage du diplome (commentaires, r�gles, dates...)
	public static final String OM_SIMULIP="SIMULIP";			// test du param�trage (simulation d'inscription)
	public static final String OM_ECTS_PAR_EC="ECTS_PAR_EC";		// ens.: renseign� la fiche ECTS d'un EC (recherche par EC directe)
	public static final String OM_ECTS_PAR_DIPL="ECTS_PAR_DIPL";	// ens.: renseign� la fiche ECTS d'un EC (recherche par diplome)
	public static final String OM_SERVICES="SERVICES";			// ens.: consulter son services dans les diff�rents EC...	
	public static final String OM_LOGS_IP="LOGS_IP";			// pouvoir consulter l'historique des logs d'un �tudiant !	
	public static final String OM_IP_ETUD="IP_ETUD";			// voir le détail des IP prises par un �tudiant donn� (+possib. chgt)
	public static final String OM_COORD_ETUD="COORD_ETUD";		// consulter les infos sur un �tudiant donn�e 
	public static final String OM_INSCRITSEC="INSCRITSEC";		// ens/scol.: liste des inscrits � un EC donn�

	public static final String OM_PARAM_DATES_DOM="PARAM_DATES_DOM"; 	// modif des dates d'inscriptions d'IPWeb par domaine...
	public static final String OM_PARAM_DATES_DIPL="PARAM_DATES_DIPL"; 	// modif des dates d'inscriptions d'IPWeb par diplomes...
	public static final String OM_PARAM_COMMENT="PARAM_COMMENT";	// Param�trage commentaires EC

	public static final String OM_RN_AUTORISE="RN_AUTORISE";	// Autorise RN par diplômes
	public static final String OM_RN_LISTEDIPL="RN_LISTEDIPL";		// gestion des diplomes pour lesquels l'accés aux RN Web est autorisé
	public static final String OM_ENVOI_MAIL="MAIL_INSCRITS";		// envoi de mail aux inscrits
	
	
	private static String jdbcUrlBase;		/// Pour pouvoir afficher les infos de connexion...
    private static Boolean modeDebug = null;	// On utilise le fichier de config pour initialiser !
	
    
	private NSTimeZone tz;
	public NSTimestampFormatter tsF,tsHLF, tsDHLF;
	private int anneeEnCours;
	private NSArray listeAnneesUniv;
//	private String repCachePhotos;  compliqu�... voir plus tard ?

	private static EOEditingContext ecApp;	// celui de l'app... 
	private NSArray listeDiplEnModif;
	private NSDictionary dictDiplEnModif;
	
//	private NSArray listeDatesDomaine;	
//	private NSMutableDictionary dictDatesDomaine;
	private NSMutableDictionary sharedUE,sharedEC,sharedECAll;	// pour stocker les fetch sur le shared Editing Context...

	private EOSharedEditingContext monSharedEC;
	private EOModelGroup modelGroup;
	private EOFetchSpecification fsGetUe,fsGetEc,fsGetEcAll, fsGetParams;

	public String cheminRepParDefaut;	// � utiliser comme "Temp" pour stocker des sorties...
	public String cheminRepJasperReports;	// localisation des reports Jaspers de l'appli...

	private ImprJasper monImprimanteJasper;
	private LRConfig paramConfig;

	private Boolean peutEnvoyerMails = null;
	private String emailRedirection = null;

	public static void main(String argv[]) {
		NSLog.out.appendln("<<<<<<<<<<<<<<<<<<  Debut de l'Application  >>>>>>>>>>>>>>>>\n");
		WOApplication.main(argv, Application.class);
	}
	
	public String urlBase() { 
		return jdbcUrlBase; 
	}
	
	public boolean debug() {
		if (modeDebug == null) {
			String val = getConfig("MODE_DEBUG");
			if (val.equals("0")) modeDebug = Boolean.FALSE;
			else modeDebug = Boolean.TRUE;
		}
		return modeDebug.booleanValue();
	}

	public String copyright()
	{
		String message = "&copy; 2006-2012 Universit\351 de la Nouvelle-Cal\351donie";
		
		 if (debug()) 
			message += "<BR>" + urlBase();
		return  message ;
	}
	
	public Application() {
		super();
		NSLog.out.appendln("et bien.. Welcome to " + this.name() + " !");
		/* ** put your initialization code in here ** */

		ecApp = new EOEditingContext();

		
		// ************************************************************************************
		/*
		// recup�rer les infos de connexion du mod�le..
		// pour la connexion de JasperReports
		EOModel modele = EOModelGroup.defaultGroup().modelNamed("ipWeb");
		EODatabaseContext dc = EODatabaseContext.registeredDatabaseContextForModel(modele, ecApp);
		EOAdaptor adaptor = dc.adaptorContext().adaptor();
		NSDictionary diconection = adaptor.connectionDictionary();

		String username = (String)diconection.objectForKey("username");
		String password = (String)diconection.objectForKey("password");
		jdbcUrlBase = (String)diconection.objectForKey("URL");

		EOModel modeleFmk = EOModelGroup.defaultGroup().modelNamed("UserLogin");
		EODatabaseContext dcFmk = EODatabaseContext.registeredDatabaseContextForModel(modeleFmk, ecApp);
		EOAdaptor adaptorFmk = dcFmk.adaptorContext().adaptor();
		NSDictionary diconectionFmk = adaptorFmk.connectionDictionary();

		String usernameFmk = (String)diconectionFmk.objectForKey("username");
		String passwordFmk = (String)diconectionFmk.objectForKey("password");

		// *** PB de IpWeb = pour l'instant je n'utilise pas SAUT/SERVAUT, donc il est est possible
		// *** 				 que l'eoModel de criWebExt2 ne soit pas non plus renseigné au niveau usernameFmk et passwordFmk
		// ***	---> contournement provisoire : les forcer en dur (à changer rapidement !)
		
		if (usernameFmk == null || usernameFmk.length() == 0) usernameFmk = "GRHUM";
		if (passwordFmk == null || passwordFmk.length() == 0) passwordFmk = "clement";
		
		NSMutableDictionary newDiconection = new NSMutableDictionary(diconectionFmk);
		newDiconection.setObjectForKey(jdbcUrlBase, "URL");
		newDiconection.setObjectForKey(usernameFmk, "username");
		newDiconection.setObjectForKey(passwordFmk, "password");
		
		adaptorFmk.setConnectionDictionary(newDiconection.immutableClone());

		// Tester la validit� de la connexion
		try {
//			tente de contacter de mani�re temporaire la DB
			adaptor.assertConnectionDictionaryIsValid();
			NSLog.out.appendln("URL de connextion utilisée pour les 2 modèles : "+jdbcUrlBase);

		}catch(Exception e) {
//			remettre le dictionnaire par d�faut
			NSLog.out.appendln("Pb pour changer le dictinnaire de connexion de UserLogin.eomodel\n" );
			NSLog.out.appendln("(framework CRIWebExt)" );
		}
		*/

		// ***********************************************************************************
		
		String nomTimeZone = getConfig("TIME_ZONE");
		if (nomTimeZone == null || nomTimeZone.equals("") )
			nomTimeZone  ="Pacific/Noumea";

		tz = NSTimeZone.timeZoneWithName(nomTimeZone,true);	// TODO : v�rifier s'il prend bien le TimeZone dans fichier de config !
		NSTimeZone.setDefault(tz);
		//		tsF = new NSTimestampFormatter("%x %X");
		tsF = new NSTimestampFormatter("%d/%m/%Y");
//		tsF = new NSTimestampFormatter("%d/%m/%Y %H:%M");
		tsF.setDefaultFormatTimeZone(tz);

		// UN formatteur de NSTimeStamp adapt�e au formattage de l'heure en heure locale HH24:MM
		tsHLF = new NSTimestampFormatter("%H:%M");
		tsHLF.setDefaultFormatTimeZone(tz);

		// Un autre formateur de NSTimeStamp pour la date du jour + l'heure en heure locale HH24:MM
		tsDHLF = new NSTimestampFormatter("%a %d/%m/%Y %H:%M");
		tsDHLF.setDefaultFormatTimeZone(tz);
		
		// ann�e en cours ?
		NSTimestamp myNSTimestamp = new NSTimestamp();
		GregorianCalendar myCalendar = new GregorianCalendar();
		myCalendar.setTime(myNSTimestamp);
//		anneeEnCours = myCalendar.get(GregorianCalendar.YEAR);

		System.out.println("Il est "+tsFormat(new NSTimestamp())+" dans le fuseau horaire "+tz.getDisplayName());

		EOModel modele = EOModelGroup.defaultGroup().modelNamed("ipWeb");
		EODatabaseContext dc = EODatabaseContext.registeredDatabaseContextForModel(modele, ecApp);
		EOAdaptor adaptor = dc.adaptorContext().adaptor();
		NSDictionary diconection = adaptor.connectionDictionary();

		String username = (String)diconection.objectForKey("username");
		String password = (String)diconection.objectForKey("password");
		jdbcUrlBase = (String)diconection.objectForKey("URL");
		
		// ouvrir une connexion JDBC...
		try {
			DriverManager.registerDriver (new oracle.jdbc.OracleDriver());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		Connect to the local database
		Connection conn = null;
		try {
			
			NSLog.err.appendln("connection JDBC : username :"+ username + ", password :"+password);
			
			conn = DriverManager.getConnection
			(jdbcUrlBase,username, password);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

//		Properties prop = System.getProperties();
//		Enumeration e = prop.propertyNames();
//		while (e.hasMoreElements()) {
//		String nomCle = (String)e.nextElement();
//		String valeur = prop.getProperty(nomCle);
//		NSLog.err.appendln("Cl�e :"+ nomCle + ", valeur :"+valeur);
//		}

		String fSep =  System.getProperties().getProperty("file.separator");

		Integer anneeCourante = getDBAnneeEnCours();
		getDBAnneesUniv();
		if (anneeCourante != null) anneeEnCours = anneeCourante.intValue();
		else anneeEnCours = myCalendar.get(GregorianCalendar.YEAR);

		// repertoire par d�faut...
		cheminRepParDefaut = System.getProperties().getProperty("java.io.tmpdir");
		LRResourceManager monRM = this.appResources();

		String nomRepJasper = "Jasper"+fSep;
		cheminRepJasperReports = monRM.pathForResource(nomRepJasper);

		nomRepJasper = "choixNonFaits.jasper";
		cheminRepJasperReports = monRM.pathForResource(nomRepJasper);

		cheminRepJasperReports = cheminRepJasperReports.substring(0,cheminRepJasperReports.lastIndexOf((int)'/'));

		// création d'un nouvel Helper...
//		monImprimanteJasper = new ImprJasper(cheminRepJasperReports+"\\",
//		cheminRepParDefaut,
//		conn);
		monImprimanteJasper = new ImprJasper(cheminRepJasperReports+fSep,cheminRepParDefaut,conn);

		System.out.println("Sorties JASPER = "+cheminRepParDefaut);

		// Classpath utilis� : (marche pas : null)
//		System.out.println("com.webobjects.classpath		="+
//		System.getProperties().getProperty("com.webobjects.classpath"));

		// Forcer le fetch de tous les objets qui seront dans le Shared Editing Context !
		listeDiplEnModif = null;

		initSharedEOs();


		// enfin m'envoyer un mail pour dire que l'appli � d�marr�e !
//		testMail();

		paramConfig = null;
		
		setPageRefreshOnBacktrackEnabled(true);
		NSLog.out.appendln("fin d'appel de Application() !");		
	}

	public CRIMailBus getMailBus() {
		return mailBus();
	}

	// On renvoit la valeur booléenne d'un paramètre du fichier de config de l'appli
	public boolean interrogeParamConfig(String nomParamConfig) {
		String val = getConfig(nomParamConfig.toUpperCase()).toUpperCase();
		return (val.equals("OUI") || val.equals("YES"));
	}
	
	public int interrogeParamConfigInt(String nomParamConfig) {
		String val = getConfig(nomParamConfig.toUpperCase()).toUpperCase();
		int res = 0;
		// Est-ce que la valeur peut être tansformée en int ?
		try {
			res=Integer.parseInt(val);
		}
		catch (NumberFormatException e) {
			System.err.println(" Valeur du paramêtre "+nomParamConfig+" du fichier de config incorrecte : un entier était attendu !\n");
		}
		return res;
	}
	
	public boolean peutEnvoyerMailsAuxEtudiants() {
		if (peutEnvoyerMails == null)
			peutEnvoyerMails = Boolean.valueOf(interrogeParamConfig("ENVOI_MAILS_ETUDIANT"));
		return peutEnvoyerMails.booleanValue();
	}
	
	// Retourner le nom de l'établissement tel qu'on le veut sur le report "choix pedag etud"
	public String nomEtablissement() {
		return chargerUnParam("LIB_ETAB");
	}
	
	// Indiquer si IP_Web est habilité à sortir les RN :
	public boolean autorisationSortirRN() {
		String autorise = chargerUnParam("SORTIE_RN");
		return (autorise != null && autorise.equalsIgnoreCase("O"));
	}

	public String getEmailRedirection() {
		if (emailRedirection == null) {
			emailRedirection = getConfig("EMAIL_REDIRECTION");
			if (emailRedirection.equals("")) emailRedirection = "applis@univ-nc.nc";	// valeur en dur en dernier recours
		}
		return emailRedirection;
	}

	// chopper une valeur du fichier de config selon sa clefs... la renvoyer en UPPER_CASE
	// renvoit CHAINE VIDE si pas de clef trouv�e !
	public String getConfig(String clef) {
		String valeur = null;
		if (paramConfig == null) paramConfig = config();
		if (clef != null) {
			valeur = (paramConfig.stringForKey(clef));
			if (valeur == null) {
				valeur = "";	// fichier de config pas Complet !!!
				System.err.println(" fichier de config pas Complet : rajouter Clef '"+clef+"' !\n");
			}
		}

		return valeur;

	}


	private void testMail() {

		// fichiers de config utilis� :
		System.out.println(" **************************** "+configFilePath()+" : "+configFileName());


		// envoi du mail :
		if (mailBus().sendMail("ipWeb@univ-nc.nc", "olive@univ-nc.nc", null, "IPWeb: demarrage", "Démarrage de l'application IPWeb")) 
			System.out.println("Mail Bien envoyé ! ****************************");
		else System.out.println(" ****************************  pb avec envoi de Mail..." );     
	}


	private Integer getDBAnneeEnCours() {
		NSArray resultats = EOUtilities.objectsWithFetchSpecificationAndBindings(ecApp, "IpwScolFormationAnnee",
				"anneeEnCours",null);
		if (resultats != null && resultats.count()>0)
			return (Integer)((EOGenericRecord)resultats.objectAtIndex(0)).valueForKey("fannKey");
		else return null;
	}

	private void getDBAnneesUniv() {
		NSArray resultats = EOUtilities.objectsWithFetchSpecificationAndBindings(ecApp, "IpwScolFormationAnnee",
				"anneesUniv",null);
		if (resultats != null && resultats.count()>0) {
			NSMutableArray temp = new NSMutableArray();
			Enumeration e = resultats.objectEnumerator();
			while (e.hasMoreElements()) {
				EOGenericRecord eoAn = (EOGenericRecord)e.nextElement();
				Integer anScol = (Integer)eoAn.valueForKey("fannKey");
				temp.addObject(anScol);
			}    		

			listeAnneesUniv = (NSArray)temp;
		}
		else listeAnneesUniv = null;
	}

	public NSArray getListeAnneesUniv() { return listeAnneesUniv; }

	private void initSharedEOs() {
		// Forcer le fetch de tous les objets qui seront dans le Shared Editing Context !
		// ==> Pour cela il suffit de forcer la cr�ation du database context...
		monSharedEC = EOSharedEditingContext.defaultSharedEditingContext();
		EOUtilities.databaseContextForModelNamed(monSharedEC, "ipWeb");

		// ATTENTION : les EO appartenant au SharedEC sont en lecture seule (pas de modif possible)
		//	et on ne peut pas les copier dans un EC � part pour les modifier... (restent dans le shared !)


		// ensuite fetcher sp�cifiquement les objets � la demande !
		modelGroup = EOModelGroup.defaultGroup();
		fsGetUe = modelGroup.fetchSpecificationNamed("fetchUeSem", "ScolMaqSemestreUe");
		fsGetEc = modelGroup.fetchSpecificationNamed("fetchEcUe", "ScolMaqUeEc");
		fsGetEcAll = modelGroup.fetchSpecificationNamed("fetchEcUeAll", "ScolMaqUeEcAll");
		fsGetParams = modelGroup.fetchSpecificationNamed("ipParam", "IpwParametres");

		sharedUE = new NSMutableDictionary();
		sharedEC = new NSMutableDictionary();
		sharedECAll = new NSMutableDictionary();

	}
	
	// Pour récupérer la valeur d'un parametre depuis le user ipWeb...
	public String chargerUnParam(String paramKey) {
		if (paramKey != null && paramKey.length() > 0) {
//			 recupérer la fetchSpec du modèle...
			NSDictionary binding = new NSDictionary(
					new NSArray(new Object[] {paramKey}),
					new NSArray(new String[] {"paramKey"}));
			EOFetchSpecification newFsGetP = fsGetParams.fetchSpecificationWithQualifierBindings(binding);
			newFsGetP.setRefreshesRefetchedObjects(true);
			
			NSArray res = monSharedEC.objectsWithFetchSpecification(newFsGetP, monSharedEC);
			
			// Y a t'il des réponses ???
			if (res != null && res.count() > 0) {
				return (String)(((EOGenericRecord)res.objectAtIndex(0)).valueForKey("paramValue"));
			}
		}
		return null;
	}
	
	/// récupérer une valeur dans un EOGenericRecord et renvoyer la valeur du bon type, en gérant le cas de la valeur NULL !
	public int recuperer1int(EOGenericRecord enreg, String nomChampInteger) {
		Integer resInt = (Integer)enreg.valueForKey(nomChampInteger);
		if (resInt == null)
			return 0;
		else 
			return resInt.intValue();
	}
	
	
	public double recuperer1double(EOGenericRecord enreg, String nomChampInteger) {
		BigDecimal resDoub = (BigDecimal)enreg.valueForKey(nomChampInteger);
		if (resDoub == null)
			return 0.0;
		else 
			return resDoub.doubleValue();
	}
	
	public String recuperer1String(EOGenericRecord enreg, String nomChampString) {
		String resSt = (String)enreg.valueForKey(nomChampString);
		if (resSt == null)
			return "";
		else 
			return resSt;
	}

	//	FIN des méthodes de récupérations...
	
	
	
	

	public NSArray chargerDesUe(Integer msemKeyPP, Integer msemKeyPC) {
		// est-ce deja fetche ?
		NSArray res = (NSArray)sharedUE.objectForKey(msemKeyPP);
		if (res==null) {
			// recuperer la fetchSpec du modele...
			NSDictionary binding = new NSDictionary(
					new NSArray(new Object[] {msemKeyPP, msemKeyPC}),
					new NSArray(new String[] {"msemKeyPP", "msemKeyPC"}));
			EOFetchSpecification newFsGetUe = fsGetUe.fetchSpecificationWithQualifierBindings(binding);

			res = monSharedEC.objectsWithFetchSpecification(newFsGetUe, monSharedEC);
			// la cacher dans le dico de l'appli !
			sharedUE.setObjectForKey(res, msemKeyPP);
		}
		return res;
	}

	public NSArray chargerDesEc(Integer mueKey) {
		// est-ce déjà fetché ?
		NSArray res = (NSArray)sharedEC.objectForKey(mueKey);
		if (res==null) {
			// recupérer la fetchSpec du modèle...
			NSDictionary binding = new NSDictionary(
					new NSArray(new Object[] {mueKey}),
					new NSArray(new String[] {"mueKey"}));
			EOFetchSpecification newFsGetEc = fsGetEc.fetchSpecificationWithQualifierBindings(binding);

			res = monSharedEC.objectsWithFetchSpecification(newFsGetEc, monSharedEC);
			// la cacher dans le dico de l'appli !
			sharedEC.setObjectForKey(res, mueKey);
		}
		return res;
	}

	// la meme mais sans filtrer les EC (DIV% et ZZZ% sont affiches : valable pour la consulte apres int�gration)
	public NSArray chargerDesEcSansFiltre(Integer mueKey) {
		// est-ce d�j� fetch� ?
		NSArray res = (NSArray)sharedECAll.objectForKey(mueKey);
		if (res==null) {
			// recuperer la fetchSpec du mod�le...
			NSDictionary binding = new NSDictionary(
					new NSArray(new Object[] {mueKey}),
					new NSArray(new String[] {"mueKey"}));
			EOFetchSpecification newFsGetEc = fsGetEcAll.fetchSpecificationWithQualifierBindings(binding);

			res = monSharedEC.objectsWithFetchSpecification(newFsGetEc, monSharedEC);
			// la cacher dans le dico de l'appli !
			sharedECAll.setObjectForKey(res, mueKey);
		}
		return res;
	}

	public void InvaliderSharedEC() {
		monSharedEC.invalidateAllObjects();
		sharedEC.removeAllObjects();
		sharedECAll.removeAllObjects();
	}


	// le r�pertoire par d�faut pour cacher les photos dans la zone du serveur Web
//	public String getRepCachePhotos() {
//	return repCachePhotos;
//	}

	public ImprJasper getMonImprimanteJasper() {
		return monImprimanteJasper;
	}

	// lancer les inits (au premier log � l'appli slt ...)
	public void initDatesIP(int anneeUniv) {
		if (listeDiplEnModif==null) {
//			chargerListeDiplEnModif();
			// chargerDatesParDomaine(anneeUniv);		--- chgt pour être en dynamique...
		}
	}

//	private void chargerListeDiplEnModif() {
//	// les autorisations d'inscriptions aux IP de certains diplomes de l'ann�e en cours..	
//	NSArray bindings = new NSArray(new Object[] {new Integer(anneeEnCours)});    	
//	EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(
//	"fannKey = %@ ", bindings);    	

//	NSArray tmp = (NSArray)dataBus().fetchArray(ecApp,"IpDiplEnmodif",qualifier,null);
//	//    	 attention, peut �tre 'null' ! A g�rer :
//	if (tmp == null) tmp = new NSArray();
//	listeDiplEnModif = tmp;

//	// accelerer les recherches...
//	NSMutableDictionary dict = new NSMutableDictionary();
//	Enumeration enum = listeDiplEnModif.objectEnumerator();
//	while (enum.hasMoreElements()) {
//	EOGenericRecord eoDipl = (EOGenericRecord)enum.nextElement();
//	String cle = (Integer)eoDipl.valueForKey("fspnKey")+"-"+(Integer)eoDipl.valueForKey("msemOrdre");
//	dict.setObjectForKey(eoDipl,cle);
//	}
//	dictDiplEnModif = dict.immutableClone();

//	}

//	private void chargerDatesParDomaine(int anneeUniv) {
//		// les dates globales d'inscriptions aux IP par domaines LMD et semestres pairs ou impairs	
//		NSArray bindings = new NSArray(new Object[] {new Integer(anneeUniv)});    	
//		EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(
//				"fannKey = %@ ", bindings);    	
//
//		NSArray tmp = (NSArray)dataBus().fetchArray(ecApp,"IpDatesOuvertureDom",qualifier,null);
//		//    	 attention, peut �tre 'null' ! A g�rer :
//		if (tmp == null) tmp = new NSArray();
//		listeDatesDomaine = tmp;
//
//		// accelerer les recherches...
//		NSMutableDictionary dict = new NSMutableDictionary();
//		Enumeration e = listeDatesDomaine.objectEnumerator();
//		while (e.hasMoreElements()) {
//			EOGenericRecord eoDom = (EOGenericRecord)e.nextElement();
//			String cle = (String)eoDom.valueForKey("fdomCode")+"-"+(Integer)eoDom.valueForKey("ipSemestre");
//			dict.setObjectForKey(eoDom,cle);
//		}
//		dictDatesDomaine = dict.immutableClone();
//	}

	private EOGenericRecord chargerDatesParDomaine(String fdomCode, Integer semPair, Integer anneeUniv) {
		// les dates globales d'inscriptions aux IP par domaines LMD et semestres pairs ou impairs	
		NSArray bindings = new NSArray(new Object[] {fdomCode, semPair, anneeUniv});    	
		EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(
				"fdomCode = %@ and ipSemestre = %@ and fannKey = %@ ", bindings);    	

		NSArray tmp = (NSArray)dataBus().fetchArray(ecApp,"IpDatesOuvertureDom",qualifier,null);
		//    	 attention, peut �tre 'null' ! A g�rer :
		if (tmp != null && tmp.count()>0) return (EOGenericRecord)tmp.objectAtIndex(0); 
		else return null; 
		
//		tmp = new NSArray();
//		listeDatesDomaine = tmp;
//
//		// accelerer les recherches...
//		NSMutableDictionary dict = new NSMutableDictionary();
//		Enumeration e = listeDatesDomaine.objectEnumerator();
//		while (e.hasMoreElements()) {
//			EOGenericRecord eoDom = (EOGenericRecord)e.nextElement();
//			String cle = (String)eoDom.valueForKey("fdomCode")+"-"+(Integer)eoDom.valueForKey("ipSemestre");
//			dict.setObjectForKey(eoDom,cle);
//		}
//		dictDatesDomaine = dict.immutableClone();
	}

	
	private EOGenericRecord chargerIpDiplEnModif(Integer fannKey, Integer fspnKey,Integer sem, boolean actifsOnly) {
		// les autorisations d'inscriptions aux IP de certains diplomes de l'ann�e en cours..	
		NSArray bindings = new NSArray(new Object[] {fannKey,fspnKey,sem});    

		String qualifSelection = "fannKey = %@ and fspnKey = %@ and msemOrdre = %@";
		if (actifsOnly) qualifSelection += " and ipActif = 'O'";
		EOQualifier qualifier = EOQualifier.qualifierWithQualifierFormat(qualifSelection, bindings);  
		EOFetchSpecification fs = new EOFetchSpecification("IpDiplEnmodif",qualifier,null);
		fs.setRefreshesRefetchedObjects(true);

		NSArray tmp = ecApp.objectsWithFetchSpecification(fs);
//		(NSArray)dataBus().fetchArray(ecApp,"IpDiplEnmodif",qualifier,null);
		//    	 attention, peut �tre 'null' ! A g�rer :
		if (tmp == null || tmp.count()==0) return null;
		return (EOGenericRecord)tmp.objectAtIndex(0);

		// accelerer les recherches...
//		NSMutableDictionary dict = new NSMutableDictionary();
//		Enumeration enum = listeDiplEnModif.objectEnumerator();
//		while (enum.hasMoreElements()) {
//		EOGenericRecord eoDipl = (EOGenericRecord)enum.nextElement();
//		String cle = (Integer)eoDipl.valueForKey("fspnKey")+"-"+(Integer)eoDipl.valueForKey("msemOrdre");
//		dict.setObjectForKey(eoDipl,cle);
//		}
//		dictDiplEnModif = dict.immutableClone();

	}

	// MAJ dans la base le row de IpDiplEnmodif avec de nouvelles dates... 
	public void majDatesIpDiplEnModif(Integer fannKey,Integer fspnKey,Integer msemOrdre,NSTimestamp nouvDateDebut,NSTimestamp nouvDateFin) {
		// chercher l'EO qui va bien... 
		EOGenericRecord ipDiplEnModif = chargerIpDiplEnModif(fannKey, fspnKey, msemOrdre,false);
		// s'il existe bien, modifier les dates...
		if (ipDiplEnModif != null) {
			ipDiplEnModif.takeValueForKey(nouvDateDebut, "ipDatesDebut");
			ipDiplEnModif.takeValueForKey(nouvDateFin, "ipDatesFin");

			// puis faire une svgde...
			ecApp.saveChanges();
		}
	}

	// MAJ dans la base le row de IpDiplEnmodif avec une nouvelle date... soit de début, soit de fin 
	public void majDatesIpDiplEnModif(Integer fannKey,Integer fspnKey,Integer msemOrdre,NSTimestamp nouvDate,boolean dateDebutConcernee) {
		// chercher l'EO qui va bien... 
		EOGenericRecord ipDiplEnModif = chargerIpDiplEnModif(fannKey, fspnKey, msemOrdre,false);
		// s'il existe bien, modifier les dates...
		if (ipDiplEnModif != null) {
			if (dateDebutConcernee)
				ipDiplEnModif.takeValueForKey(nouvDate, "ipDatesDebut");
			else ipDiplEnModif.takeValueForKey(nouvDate, "ipDatesFin");

			// puis faire une svgde...
			ecApp.saveChanges();
		}
	}

	// MAJ dans la base le row de IpDiplEnmodif avec le type d'activit� demand�... 
	public void majActiviteIpDiplEnModif(Integer fannKey,Integer fspnKey,Integer msemOrdre, String activite) {
		// chercher l'EO qui va bien... 
		EOGenericRecord ipDiplEnModif = chargerIpDiplEnModif(fannKey, fspnKey, msemOrdre,false);
		// s'il existe bien, modifier les dates...
		if (ipDiplEnModif != null) {
			ipDiplEnModif.takeValueForKey(activite, "ipActif");

			// puis faire une svgde...
			ecApp.saveChanges();
		}	
	}

	// MAJ dans la base le row de IpDiplEnmodif avec le type d'activit� demand�... 
	public void majAutoriseIpRedoublant(Integer fannKey,Integer fspnKey,Integer msemOrdre, String autoriseIpRdblt) {
		// chercher l'EO qui va bien... 
		EOGenericRecord ipDiplEnModif = chargerIpDiplEnModif(fannKey, fspnKey, msemOrdre,false);
		// s'il existe bien, modifier les dates...
		if (ipDiplEnModif != null) {
			ipDiplEnModif.takeValueForKey(autoriseIpRdblt, "autoriseRedoublant");

			// puis faire une svgde...
			ecApp.saveChanges();
		}	
	}	
	
	

	// lancer mise � jour de la row qui va bien dans IP_DATES_OUVERTURE_DOM (nouvelles dates dom/parit� sem)
	// REM IMPORTANTE : les nouvelles dates correspondent (en temps local) � une date avec heure = 00:00 (saisie via formulaire!)
	//			ou bien d�j� � une date avec heure = 23:59 (non passage par formulaire)
	//			au moment de la sauvegarde, si la date de fin est avec heure = 00:00, passer son heure � 23:59 (heure locale)
	public void majDatesIpDomPSem(EOGenericRecord lePSemDomChoisi, NSTimestamp nouvDateDebut,NSTimestamp nouvDateFin) {
		// ajustement de l'heure de fin : 
		if (nouvDateFin != null) {
			if (zeroHeureDate(nouvDateFin)) {
				 nouvDateFin = nouvDateFin.timestampByAddingGregorianUnits(0, 0, 0, 23, 59, 0);
			}
		}

		// chercher l'EO qui va bien dans le contexte appicatif... 
		Integer ipSemestre, annee;
		String fdomCode;
		
		fdomCode = (String)lePSemDomChoisi.valueForKey("fdomCode");
		ipSemestre = (Integer)lePSemDomChoisi.valueForKey("ipSemestre");
		annee = (Integer)lePSemDomChoisi.valueForKey("fannKey");

		Integer semPair = new Integer((ipSemestre.intValue())%2);
		String cle = fdomCode + "-" + semPair;
		
		EOGenericRecord eoDom = chargerDatesParDomaine(fdomCode, ipSemestre, annee);
		
//		EOGenericRecord eoDom = (EOGenericRecord)dictDatesDomaine.objectForKey(cle);

		// MAJ de l'EO (IP_DATES_OUVERTURE_DOM) avec les nouvelles valeurs...
		if (eoDom != null) {
			eoDom.takeValueForKey(nouvDateDebut, "ipDatesDebutDom");
			eoDom.takeValueForKey(nouvDateFin, "ipDatesFinDom");

			// faire une svgde...
			ecApp.saveChanges();

			// puis Envoyer une notification de chgt de dates pour ce fdomCode � tous les observateurs :
			NSNotificationCenter.defaultCenter().postNotification(
					"chgtDateDom",		// Voil� ce que je veux dire !!!!
					this,	         	// C�est kiki poste ! C�est moi ki poste!
					new NSDictionary(new Object[] {fdomCode, ipSemestre},
							new Object[] {"fdomCode", "ipSemestre"}));	// avec le dico !
		}

	}


	public boolean semestreEditable(Integer fspnKey,Integer sem, Integer anneeUniv) {
		EOGenericRecord eoDipl = chargerIpDiplEnModif(anneeUniv,fspnKey,sem, true);
		if (eoDipl != null) return true;
		else return false;
	}
	
	// Pour savoir si un semestre donné a déjà été intégré...
	public boolean semestreIntegre(Integer fspnKey,Integer sem, Integer anneeUniv) {
		EOGenericRecord eoDipl = chargerIpDiplEnModif(anneeUniv,fspnKey,sem, true);
		if (eoDipl != null) {
			if (((String)eoDipl.valueForKey("integrationIp")).equalsIgnoreCase("O")) return true;
			else return false;
		}
		else return false;
	}
	
	


	// renvoit un tableau de 2 dates (d�but et fin d'ins� aux IP Web) en fonction du FSPN_KEY et du semestre...
	// si cette association diplome/semestre n'existe pas, alors retourne null !

	// ATTENTION aux elements suivants quand on stocke une date - 14/2/07 -a la mano dans la base (sans la partie heure)
	//	a) Oracle considere qu'il s'agit du 14/02/07 0h00 ETC (et non pas minuit), soit en NC +11h
	//  b) Si on compare avec le resultat de new NSTimestamp() [now] on va comparer now - 11h avec la date precedente
	//		--> implique que le changement de date ne sea constate qu'a 11h du matin a Noumea !
	//	c) si on traduit (via un GregorianCalendar) la date ETC en elements jour/mois/annee heures:minutes
	//		et qu'on reassemble ensuite avec new NSTimestamp(annee, mois+1, jour, 23, 59, 59,tz);
	//		il cree une date en ETC en decalage avec la date rappatriee en accord avec le TimeZone tz
	//		ce qui permet ensuite de comparer la valeur [now] et cette date en ETC !!!

	public NSTimestamp[] chercherDatesDiplSem(Integer fspnKey,Integer sem, Integer anneeUniv) {
		String cle = fspnKey+"-"+sem;
		EOGenericRecord eoDipl = chargerIpDiplEnModif(anneeUniv, fspnKey,sem,true);
		if (eoDipl == null) return null;

		// le domaine-semestre est accessible en modif � IP Web
		Integer semPair = new Integer((sem.intValue())%2);
		EOGenericRecord eoDom = chargerDatesParDomaine((String)eoDipl.valueForKey("fdomCode"), semPair, anneeUniv);

		// si ce semestre n'est pas ouvert pour ce dept, c'est que c'est encore trop t�t !
		if (eoDom == null) return null;

		NSTimestamp dateDeb,dateFin;
		dateDeb = (NSTimestamp)eoDipl.valueForKeyPath("ipDatesDebut");
		if (dateDeb== null) {
			dateDeb = (NSTimestamp)eoDom.valueForKeyPath("ipDatesDebutDom");
		}
		dateFin = (NSTimestamp)eoDipl.valueForKeyPath("ipDatesFin");
		if (dateFin== null) {
			dateFin = (NSTimestamp)eoDom.valueForKeyPath("ipDatesFinDom");
		}

		// Cas ou la période n'est pas indéfinie...
		if (dateDeb != null && dateFin != null) {
			if (dateFin.before(dateDeb)) {
				NSTimestamp dateTemp = dateFin;
				dateFin = dateDeb;
				dateDeb = dateTemp;
			}

			// la date de d�but doit �tre convertie en ETC 0h00 :
			// la date de fin doit �tre incluse : passer l'heure � 23h59...
		}
		
		return (new  NSTimestamp[] {conversionDateBDD(dateDeb,0,0),conversionDateBDD(dateFin,23,59), dateDeb, dateFin});
	}
	
	
	// Savoir si on autorise les redoublants...
	public boolean autoriseRedoublants(Integer fspnKey,Integer sem, Integer anneeUniv) {
		EOGenericRecord eoDipl = chargerIpDiplEnModif(anneeUniv, fspnKey,sem,true);
		if (eoDipl != null) {
			String aut =  (String)eoDipl.valueForKey("autoriseRedoublant");
			if (aut != null) return aut.equalsIgnoreCase("O");
		}
		return true;
	}
	

	// utile pour convertir en vraie jour/heure ETC une date sans heure r�cup�r�e dans la base
	// on pr�cise l'heure que l'on veut pour cette date
	public NSTimestamp conversionDateBDD(NSTimestamp dateBase,int heuresAjout, int minutesAjout) {
		if (dateBase != null) {
			GregorianCalendar myCalendar = new GregorianCalendar();
			myCalendar.setTime(dateBase);
			int heure = myCalendar.get(GregorianCalendar.HOUR_OF_DAY);
			int minute = myCalendar.get(GregorianCalendar.MINUTE);

			// 2 cas : 
			// soit la date est mise � la mano depuis toad (ex 14/02/2007) et donc on la r�cup�re avec heure ETC = 00:00
			if (heure == 0 && minute == 0) {
				// l�, il faut la convertir en date avec heure selon les params transmis...
				int jour = myCalendar.get(GregorianCalendar.DAY_OF_MONTH);
				int mois = myCalendar.get(GregorianCalendar.MONTH);
				int annee = myCalendar.get(GregorianCalendar.YEAR);

				return  new NSTimestamp(annee, mois+1, jour, heuresAjout, minutesAjout, 0,tz);
			}
		}
		// sinon on ne touche pas � la date, qui a �t� fix�e correctement depuis IP Web directement
		return dateBase;
	}


	// renvoyer le path vers un fichier dans les resources !
	public String cheminPourFic(String fileName) {
		String path = appResources().pathForResource(fileName);
		return path;
	}

	// retourne une repr�sentation avec un formatage stdr et dans le bon TimeZone...
	public String tsFormat(NSTimestamp ts) {
		return tsF.format(ts);
	}

	// retourne une repr�sentation avec un formatage stdr et dans le bon TimeZone...
	public String tsDHLFormat(NSTimestamp ts) {
		return tsDHLF.format(ts);
	}

	// indique si une date � une heure LOCALE = 00:00 ou non 
	public boolean zeroHeureDate(NSTimestamp laDate) {
		// je r�cup�re l'heure LOCALE repr�sent�e par cette date :
		String heureLocale = tsHLF.format(laDate);
		if (heureLocale.compareTo("00:00") == 0) return true;
		else return false;
	}

	public NSTimestamp verificationDate(NSTimestamp dateAVerifier) {
		if (dateAVerifier != null) {
			// On v�rifie seulement le si�cle (la date est cens�e �tre OK !)
			GregorianCalendar myCalendar = new GregorianCalendar();
			myCalendar.setTime(dateAVerifier);
			int year = myCalendar.get(GregorianCalendar.YEAR);

			if (year <= (anneeEnCours+1 - 2000) && year >=0)
				dateAVerifier = dateAVerifier.timestampByAddingGregorianUnits(2000, 0, 0, 0, 0, 0);
			else if (year < 2000 || year > anneeEnCours+1)
				dateAVerifier = null;
		}
		return dateAVerifier;
	}

	public int getAnneeUnivEnCours() { return anneeEnCours; }



	/******************************************/
	/* Ces 2 m�thodes doivent �tre d�finies ***/
	// car cette classe d�rive de MyApp (classe abstraite)

	public String urlWebService() {
		return null;
	}	

	public String emailHandleException() {
		return config().stringForKey("EMAIL_REDIRECTION");
	}
	/******************************************/


	/* Utilisé pour le support du login...*/

	public boolean useEmailForLogin(){
//		System.out.print("Valeur de la valiable APP_USE_EMAIL_FOR_LOGIN  dans le fichier de config = "+ config().stringForKey("APP_USE_EMAIL_FOR_LOGIN"));
//		boolean res = config().booleanForKey("APP_USE_EMAIL_FOR_LOGIN");
//		System.out.print(", ce qui est vu  comme ");
//		if (res) System.out.println("true");
//		else System.out.println("false");
		return config().booleanForKey("APP_USE_EMAIL_FOR_LOGIN");
		
	}
	
/* Utilisé pour le support du login par mail */
	
	public String domaineEtudiant(){
		return config().stringForKey("DOMAINE_ETUDIANT");
	}
	
	
	/* Utilisé pour le support des IP Anonymes */
	
	public boolean useIpAnonymes(){
		return config().booleanForKey("APP_USE_IP_ANONYMES");
	}

	// Utilisé pour l'accès au CAS pour les étudiants...
	public boolean etudiantUseCas(){
		return config().booleanForKey("APP_ETUDIANT_USE_CAS");
	}
	
	
	/** 
	 * 
	 * Calls _isAdditionalForeignSupportedDevelopmentPlatform
	 * 
	 * @see
	 com.webobjects.appserver.WOApplication#_isForeignSupportedDevelopmentPlatform()
	 */
	public boolean _isForeignSupportedDevelopmentPlatform()
	{
		return (super._isForeignSupportedDevelopmentPlatform() ||
				_isAdditionalForeignSupportedDevelopmentPlatform());
	}

	/**
	 * Check for Windows XP
	 * @return true if runs on XP
	 */
	public boolean _isAdditionalForeignSupportedDevelopmentPlatform()
	{
		String s = System.getProperty("os.name");
		return ( s != null && s.equals("Windows XP") );
	}

}

